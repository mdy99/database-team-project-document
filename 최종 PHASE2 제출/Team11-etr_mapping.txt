					[ DB 테이블 매핑 겸 목차 ]
	[TABLE]																[ERD]
 1. 유저(PLAYER)															- PLAYER
 2. 게임 세션(GAME_SESSION)													- GAME_SESSION
 3. 고객 카탈로그(CUSTOMER_CATALOG)											- CUSTOMER_CATALOG
 4. 아이템 카테고리(ITEM_CATEGORY) : 20개 레코드(상세 설명은 아래 엔티티)					- ITEM_CATEGORY
 5. 아이템 카탈로그(ITEM_CATALOG)											- ITEM_CATALOG
 6. 아이템(EXISTING_ITEM)													- EXISTING_ITEM
 7. 거래(DEAL_RECORD)														- DEAL_RECORD
 8. 플레이어-고객 비밀 발견(CUSTOMER_HIDDEN_DISCOVERED_IN_GAME_SESSION)		 <관계>	- 'S HIDDEN_DICOVERED_BY
 9. 플레이어-아이템 전시(GAME_SESSION_ITEM_DISPLAY)						 <관계>	- IS_DISPLAYED_BY
10. 뉴스(EXISTING_NEWS) 										<WEAK ENTITY>	- EXISTING_NEWS
11. 뉴스 카탈로그(NEWS_CATALOG)												- EXISTING_CATALOG

					[ DB 엔티티 설명 ]
 1. 유저(PLAYER)
	- 플레이어 키		PK	NUMBER(9)			: 내부 조인용 PK.
	- 플레이어 아이디			VARCHAR2(30)		: 유저가 입력하는 아이디
	- 해시된 비밀번호			VARCHAR2(81)		: 유저가 설정한 비밀번호. SHA256 해시(HEX, 64자) + 구분자 + Salt(16자) 고려
	- 세션 토큰			UQ	VARCHAR2(64)		: 로그인 세션 구분용 토큰. 랜덤64B 문자열
	- 마지막 요청 시간		DATE				: 매 요청마다 업데이트 함. 마지막 요청 시간으로부터 30분 이상 지날 시, 주기적으로 모든 세션 만료 시킴

2. 게임 세션(GAME_SESSION) : 게임 플레이 하는 한 판 단위
	- 게임 세션 키		PK	NUMBER(9)			: 내부 조인용 PK. 
	- 플레이어 키		FK	NUMBER(9)			: 해당 게임을 플레이하는/했던 플레이어 키
	- 게임 내 일수			NUMBER(5)			: 게임 내 일수 저장. 최대 10^5일까지 저장 가능. 최소 1일 이상
	- 잔금				NUMBER(9)			: 최대 10^9짜리 돈까지 저장 가능. 최소 0원 이상
	- 개인 빚				NUMBER(9)			: 남은 (갚아야 하는) 개인 빚(게임 목적). BETWEEN 0~500,000. 주마다 정산. DEFAULT 500,000
	- 전당포 빚				NUMBER(9)			: 남은 (갚아야 하는) 전당포 빚. 게임 내에서 추가로 대출한 돈. >=0
	- 해금한 쇼케이스 수		NUMBER(1)			: 현재 해금한 쇼케이스 숫자 2,4,8 해금 가능
	- 게임 내 닉네임			VARCHAR2(10 CHAR)	: 10글자 내 이름(한글 고려)
	- 게임 내 전당포 이름		VARCHAR2(10 CHAR)	: 10글자 내 이름(한글 고려)
	- 게임 종료 일수			NUMBER(5)			: 게임 종료 시 게임 내 일수. 클리어 시, 양수, 게임 오버 시, 음수, NULL은 게임 중
	- 게임 종료 당시 날짜		DATE				: 게임 종료 시 당시 현실 날짜

 3. 고객 카탈로그(CUSTOMER_CATALOG)
	- 고객 키 			PK	NUMBER(9)			: 내부 조인용 PK.
	- 고객 이름				NUMBER(3 CHAR)	: 한글 기준 3글자 저장 가능
	- 카테고리 키 		FK	NUMBER(9)			: 선호하는 카테고리 키
	- 이미지 ID	 			VARCHAR2(10)		: 고객 이미지. 동일한 이미지를 여러 고객이 공유할 수 있음. CIM00001~CIM99999
	- 사기 가능성 			NUMBER(5,4)		: 사기를 잘 칠 것 같은 정도. 0.0000 ~ 1.0000
	- 수집력 				NUMBER(5,4)		: 수집을 잘 할 것 같은 정도. 0.0000 ~ 1.0000
	- 부주의함 				NUMBER(5,4)		: 흠 많이 낼 것 같은 정도. 0.0000 ~ 1.0000

 4. 아이템 카테고리(ITEM_CATEGORY)
	- 카테고리 키		PK	NUMBER(9)			: 내부 조인용 PK.
	- 카테고리 이름 			VARCHAR2(10 CHAR)	: 한글 기준 10글자 저장 가능

>> 고객의 선호 카테고리와 아이템의 카테고리가 일치해야 구매를 하는 시스템
>> 카테고리가 너무 많아지면, 고객이 아이템을 살 확률이 너무 낮아져, 게임이 진행이 안 됨.
>> 그래서 고정적인 20개 레코드만을 유지함.

 5. 아이템 카탈로그(ITEM_CATALOG)
	- 아이템 카탈로그 키	PK	NUMBER(9)			: 내부 조인용 PK.
	- 아이템 이름 PK 			VARCHAR2(20 CHAR)	: 한글 기준 20글자 저장 가능
	- 이미지 ID	 			VARCHAR2(10)		: 아이템 이미지. 동일한 이미지를 여러 아이템이 공유할 수 있음. ITM00001~ITM99999
	- 카테고리 키 		FK	NUMBER(9)			: 아이템의 카테고리 키
	- 기준가				NUMBER(9)			: 아이템의 기준 가격

 6. 아이템(EXISTING_ITEM)
	- 아이템 키			PK	NUMBER(9			: 내부 조인용 PK.
	- 게임 세션 키		FK	NUMBER(9)			: 해당 아이템이 어느 게임 세션에서 생성됐는지 가리킴
	- 카탈로그 키		FK	NUMBER(9)			: 아이템의 기본 속성
	- 등급				NUMBER(1)			: 숨겨진 등급. 일반(0), 레어(1),유니크(2),레전더리(3)
	- 찾은 등급				NUMBER(1)			: 플레이어가 '감정'을 통해 현재까지 최종으로 찾은 등급
	- 흠 개수				NUMBER(2)			: 흠 개수 0~14개까지 존재 가능
	- 찾은 흠 개수			NUMBER(2)			: 플레이어가 '흠 찾기'를 통해 현재까지 최종으로 찾은 흠 개수
	- 수상한 흠 기운 정도		NUMBER(5, 4)		: 아이템에서 풍기는 수상한 흠 기운 정도, 0.0000 ~ 1.0000 사이 값 가짐
	- 진위 여부				CHAR(1)			: 진위 여부, BOOL이 없으므로 Y OR N CHAR로 저장.
	- 진위 발견 여부			CHAR(1)			: 플레이어가 진위 여부를 확정했는지 여부 (Y: 진품/가품 밝힘. N: 밝혀내지 못함.)
	- 상태				NUMBER(1)			: 아이템 진행 상황. 생성됨(0), 전시 중(1), 복원 중(2), 경매 중(3), 판매 됨(4)

 7. 거래(DEAL_RECORD)
	- 거래 키			PK	NUMBER(9)			: 내부 조인용 PK.
	- 게임 세션 키		FK	NUMBER(9)			: 해당 거래가 속하는 게임 키
	- 판매 고객 키		FK	NUMBER(9)			: 해당 거래에 참여한 판매 고객 키
	- 구매 고객 키		FK	NUMBER(9)			: 해당 거래에 참여한 구매 고객 키. NULL 가능, 제약: 판매 고객과 구매 고객은 달라야 함
	- 아이템 키			FK	NUMBER(9)			: 해당 거래에 참여된 아이템 키.
	- 최초 제시가			NUMBER(9)			: 고객이 최초로 제시한 가격
	- 구매가				NUMBER(9)			: 해당 아이템을 매입한 가격
	- 감정가				NUMBER(9)			: 판매하기 전 최종 감정된 가격
	- 최종 판매가			NUMBER(9)			: 고객/경매로 최종 판매된 가격
	- 구매 날짜				NUMBER(5)			: 구매한 게임 내 일수. 구매한 날짜에 채움. NULL 가능
	- 판매 날짜				NUMBER(5)			: 판매한 게임 내 일수. 판매한 날짜에 채움. NULL 가능

 8. 게임 세션-고객 비밀 발견(CUSTOMER_HIDDEN_DISCOVERED_IN_GAME_SESSION) <관계>
	- 발견 키			PK	NUMBER(9)			: 내부 조인용 PK.
	- 게임 세션 키		FK	NUMBER(9)			: 해당 게임 세션 키
	- 고객 키			FK	NUMBER(9)			: 해당 고객 키
	- 열람 여부				NUMBER(3)			: 고객 뒷조사로 열은 고객 힌트 열람 여부.
											*0~7 사이의 정수를 저장하며, 이진수로 나타낸 각 자리수에 대해 힌트 3개 각각의 공개 여부를 나타냄
	- 플레이어-고객		UQ	*CONSTRAINT		: 플레이어, 고객 복합키 중복 제거. 플레이어는 한 고객에 대해 만남 횟수 한 번만 저장 후 업데이트하여 사용

9. 게임 세션-아이템 전시(GAME_SESSION_ITEM_DISPLAY) <관계>
	- 디스플레이 키		PK	NUMBER(9)			: 내부 조인용 PK.
	- 게임 세션 키		FK	NUMBER(9)			: 해당 게임 세션 키
	- 아이템 키			FK	NUMBER(9)			: 해당 아이템 키
	- 전시 위치				NUMBER(1)			: 0~7번 (총 8개의 전시 위치) 중 어디에 위치했었는지 저장한다.
	- 게임 세션-전시 위치	UQ	*CONSTRAINT		: 한 전시장 내의 전시 위치 복합키 중복 제거. 한 위치에 두 아이템 막기 위함
	- 게임 세션-아이템	UQ	*CONSTRAINT		: 한 전시장 내의 중복된 아이템을 막기 위함

10. 뉴스(EXISTING_NEWS): <<WEAK_ENTITY>>
	- 게임 세션 키		FK		NUMBER(9)		: 뉴스가 일어난 게임의 세션 키
	- 뉴스 카탈로그 키	FK		NUMBER(9)		: 해당 뉴스의 종류 키
	- 영향 정도					NUMBER(3)		: 해당 뉴스가 가격에 얼마나 영향을 미치는지, 단위: %
	- 게임 세션-카탈로그	PK		*CONSTRAINT	: PK(게임 세션 키, 뉴스 카탈로그키). WEAK_ENTITY 만족을 위해서 복합키를 이용함. ERD에서 변화된 점.

11. 뉴스 카탈로그(NEWS_CATALOG)
	- 카탈로그 키		PK	NUMBER(9)			: 내부 조인용 PK. SEQUENCE로 구현
	- 뉴스 이름				VARCHAR2(20 CHAR)	: 뉴스 이름. 한글 기준 20글자 담기 가능
	- 영향 받는 가격			NUMBER(1)			: 영향 받는 최초 제시가(0), 구매가(1), 감정가(2), 최종 판매가(3)
	- 영향 받는 카테고리	FK	NUMBER(9)			: 영향 받는 카테고리 키



				[ ERD 테이블이 아닌 관계 설명 ]

PLAYER				-<GENERATES>-					GAME_SESSTION: (0,n)-(1,1)
	유저는 게임 세션을 만든다. 게임은 하나도 만들지 않을 수도 있고 여러 개 만들 수도 있음.
	하지만 유저는 게임이 존재하는 한 무조건 존재해야 하고, 게임 하나당 유저는 한명뿐.

CUSTOMER_CATALOG		-<'S HIDDEN_DISCOVERED_BY>-		GAME_SESSION: (0,n)-(0,m)
	게임 세션은 여러 고객을 발견할 수 있고, 한 고객은 여러 게임 세션에 의해 발견될 수 있음

CUSTOMER_CATALOG		-<BUYS>-						DEAL_RECORD: (0,n)-(1,1) 		// 구매자로서의 고객
	손님은 구매 기록을 남기지 않을 수도, 여러 남길 수도 있다(**구매**를 하지 않을 수도, 여러 물품을 구매할 수도 있다).
	그리고 하나의 거래 기록(구매 기록)은 한 손님당 최소 한개 최대 한개 가능

CUSTOMER_CATALOG		-<SELLS>-						DEAL_RECORD: (0,n)-(1,1)		// 판매자로서의 고객
	손님은 판매 기록을 남기지 않을 수도, 여러 남길 수도 있다(**판매**를 하지 않을 수도, 여러 물품을 판매할 수도 있다).
	그리고 하나의 거래 기록(판매 기록)은 한 손님당 최소 한개 최대 한개 가능

DEAL_RECORD			-<IS_INCLUDED_BY>-				GAME_SESSION: (1,1)-(0,n).
	거래 기록은 플레이어의 게임 세션에 포함된다. 모든 거래 기록은 반드시 어떤 게임 세션에 속해야 하고, 동시에 한 게임 세션에만 속해야 한다.
	또한 플레이어의 게임 세션은 거래 기록을 하나도 가지고 있지 않을 수도 있고 여러 개를 가질 수도 있음.

DEAL_RECORD			-<INCLUDES>-					EXISTING_ITEM: (1,1)-(0,1)
	DEAL_RECORD는 반드시 아이템이 할당 되어야 하지만, (1,1)
	EXISTING_ITEM은 생성되고 난 후, 거래에 아직 참여하지 않았을 수도 있다. 그러므로 (0,1)

EXISTING_ITEM			-<IS_ALLOCATED_BY>-				GAME_SESSION: (1,1)-(0,n)
	아이템은 플레이어의 게임 세션에 할당된다. 플레이어가 게임에서 아이템을 생성하는데, 아직 하나도 생성 안했을 수도, 여러개를 생성했을 수도 있으며,
	각 아이템들은 생성이 된다면 해당 게임 세션에 반드시 할당된다.

EXISTING_ITEM			-<IS_DISPLAYED_BY>-				GAME_SESSION: (0,1)-(0,8).
	아이템은 게임 세션에 보여진다. 플레이어가 게임에서 아이템을 진열할 수 있는데, 아이템들을 하나도 진열하지 않을 수도 있고, 최대 8개까지 진열해 놓을 수도 있다.
	각각 아이템들은 해당 진열에 참여할 수도 있고, 참여하지 않을 수도 있으며, 참여 한다면 최대 한번 밖에 되지 않음.

GAME_SESSION			-<IS_AFFECTED_BY>-				EXISTING_NEWS: (0,3)-(1,1).
	플레이어의 게임 세션은 뉴스에 영향을 받는다. 뉴스가 하나도 안 뜰 수도 있고, 최대 3개 까지 떠서 영향을 줄 수도 있다.
	각 뉴스는 반드시 플레이어의 게임 세션에 할당 되어야 한다.

EXISTING_NEWS			-<REALIZES>-					NEWS_CATALOG: (1,1)-(0,n).
	실제 뉴스(EXISTING_NEWS)는 뉴스 카탈로그(NEWS_CATALOG)를 실체화한다.
	각 실제 뉴스는 반드시 하나의 뉴스 카탈로그에 기반해야 하며(1,1), 각 뉴스 카탈로그는 0개 이상의 실제 뉴스에 의해 실체화될 수 있다(0,n).

CUSTOMER_CATALOG		-<LOVES_TO_BUY>-				ITEM_CATEGORY: (1,1)-(0,n).
	고객은 특정 카테고리 아이템을 좋아한다. 고객이 좋아하는 카테고리는 반드시 하나가 할당 되어야 한다.
	아이템 카테고리는 어떠한 고객도 선호하지 않을 수도, 여러명이 선호할 수도 있다.

EXISTING_ITEM			-<REALIZES>-					ITEM_CATALOG: (1,1)-(0,n).
	아이템은 아이템 카탈로그를 실체화한다. 아이템은 반드시 하나의 카탈로그를 참조하여 실체화해야 하며,
	하나의 아이템 카탈로그는 아이템이 참조하지 않았을 수도 N개가 참조했을 수도 있다.

ITEM_CATALOG			-<BELONGS_TO>-				ITEM_CATEGORY: (1,1)-(0,n).
	아이템 카탈로그(ITEM_CATALOG)는 아이템 카테고리(ITEM_CATEGORY)에 속한다.
	각 아이템 카탈로그는 반드시 하나의 아이템 카테고리에 속해야 하며(1,1), 각 아이템 카테고리는 0개 이상의 아이템 카탈로그를 포함할 수 있다(0,n).
	예를 들어, 보석 카탈로그는 보석이라는 카테고리 안에 속한다.

ITEM_CATEGORY			-<IS_AFFECTED_BY>-				NEWS_CATALOG: (0,n)-(1,1).
	아이템 카테고리(ITEM_CATEGORY)는 뉴스 카탈로그(NEWS_CATALOG)에 의해 영향을 받는다.
	예를 들면, 보석 카테고리는 보석 가격 하락 뉴스에 영향을 받는다. 각 아이템 카테고리는 0개 이상의 뉴스 카탈로그로부터 영향을 받을 수 있으며(0,n),
	각 뉴스 카탈로그는 반드시 하나의 아이템 카테고리에 영향을 미쳐야 한다(1,1).
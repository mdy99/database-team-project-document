-- 플레이어 정보
SELECT * FROM GAME_SESSION WHERE PLAYER_KEY = 1 ORDER BY GAME_SESSION_KEY DESC FETCH FIRST ROW ONLY;
-- 진열대 정보 (Type 8)
SELECT D.DISPLAY_POS, I.*, IC.*
FROM GAME_SESSION_ITEM_DISPLAY D, EXISTING_ITEM I, ITEM_CATALOG IC
WHERE
    D.GAME_SESSION_KEY = (
        SELECT GAME_SESSION_KEY FROM GAME_SESSION
        WHERE PLAYER_KEY = 1
        ORDER BY GAME_SESSION_KEY DESC
        FETCH FIRST ROW ONLY
    )
    AND D.ITEM_KEY = I.ITEM_KEY
    AND I.ITEM_CATALOG_KEY = IC.ITEM_CATALOG_KEY
ORDER BY D.DISPLAY_POS;
-- 당일자 Event
SELECT * FROM EXISTING_NEWS N, NEWS_CATALOG NC
WHERE
    N.GAME_SESSION_KEY = (
        SELECT GAME_SESSION_KEY FROM GAME_SESSION
        WHERE PLAYER_KEY = 1
        ORDER BY GAME_SESSION_KEY DESC
        FETCH FIRST ROW ONLY
    )
    AND N.NCAT_KEY = NC.NCT_KEY
ORDER BY NC.NCT_KEY;
-- 손님 pk -> 손님 선호하는 Category 진열장에 있는 선호 Item들
SELECT *
FROM CUSTOMER_CATALOG C, GAME_SESSION_ITEM_DISPLAY D, EXISTING_ITEM I, ITEM_CATALOG IC
WHERE
    C.CUSTOMER_KEY = 1
    AND D.GAME_SESSION_KEY = (
        SELECT GAME_SESSION_KEY FROM GAME_SESSION
        WHERE PLAYER_KEY = 1
        ORDER BY GAME_SESSION_KEY DESC
        FETCH FIRST ROW ONLY
    )
    AND D.ITEM_KEY = I.ITEM_KEY
    AND I.ITEM_CATALOG_KEY = IC.ITEM_CATALOG_KEY
    AND IC.CATEGORY_KEY = C.CATEGORY_KEY
ORDER BY D.DISPLAY_POS;
-- 플레이어의 거래 기록 (Type 4)
SELECT * FROM DEAL_RECORD
WHERE GAME_SESSION_KEY = (
    SELECT GAME_SESSION_KEY FROM GAME_SESSION
    WHERE PLAYER_KEY = 1
    ORDER BY GAME_SESSION_KEY DESC
    FETCH FIRST ROW ONLY
);
-- 손님의 정보 + 힌트: 사기정도, 잘수집정도, 부주의함
SELECT CUSTOMER_NAME, IMG_ID, FRAUD, WELL_COLLECT, CLUMSY FROM CUSTOMER_CATALOG WHERE CUSTOMER_KEY = 1;
-- 거래에 필요한 정보 (레전더리 확률값, 유니크 확률값, 레어 확률값, 진품 확률값) (Type 7)
SELECT
    (10 * CLUMSY) FLAW_BASE,
    (15 + (65 * WELL_COLLECT)) LEGENDARY_P,
    (20 + PROBABILITY_BASE) UNIQUE_P,
    (30 + PROBABILITY_BASE) RARE_P,
    (35 + PROBABILITY_BASE) NORMAL_P,
    FAKE_P,
    (1 - FAKE_P) GENIUE_P
FROM (
    SELECT CC.*, (65 * (1 - WELL_COLLECT) / 3) PROBABILITY_BASE, (10 + 90 * FRAUD) FAKE_P
    FROM CUSTOMER_CATALOG CC WHERE CUSTOMER_KEY = 1
);
-- 진열장 위치 -> Item
SELECT I.*, IC.*
FROM GAME_SESSION_ITEM_DISPLAY D, EXISTING_ITEM I, ITEM_CATALOG IC
WHERE
    D.DISPLAY_POS = 1
    AND D.GAME_SESSION_KEY = (
        SELECT GAME_SESSION_KEY FROM GAME_SESSION
        WHERE PLAYER_KEY = 1
        ORDER BY GAME_SESSION_KEY DESC
        FETCH FIRST ROW ONLY
    )
    AND D.ITEM_KEY = I.ITEM_KEY
    AND I.ITEM_CATALOG_KEY = IC.ITEM_CATALOG_KEY;
-- 다음 날 넘어갈 때, 정산 -> 결과
SELECT
    G.MONEY + SUM(BOUGHT.PURCHASE_PRICE) - SUM(SOLD.SELLING_PRICE) AS TODAY_START,
    G.MONEY AS TODAY_END,
    G.PAWNSHOP_DEBT * 0.05 AS TODAY_INTEREST,
    G.MONEY - G.PAWNSHOP_DEBT * 0.05 AS TODAY_FINAL
FROM GAME_SESSION G, DEAL_RECORD BOUGHT, DEAL_RECORD SOLD
WHERE
    G.GAME_SESSION_KEY = (
        SELECT GAME_SESSION_KEY FROM GAME_SESSION
        WHERE PLAYER_KEY = 1
        ORDER BY GAME_SESSION_KEY DESC
        FETCH FIRST ROW ONLY
    )
    AND BOUGHT.GAME_SESSION_KEY = G.GAME_SESSION_KEY
    AND SOLD.GAME_SESSION_KEY = G.GAME_SESSION_KEY
    AND BOUGHT.BOUGHT_DATE = G.DAY_COUNT
    AND SOLD.SOLD_DATE = G.DAY_COUNT
GROUP BY G.MONEY, G.PAWNSHOP_DEBT;  -- G는 정확히 1개 -> 결과 자체에는 영항 X
-- 다음 주로 넘어갈 때, 정산 (일별 정산 포함) -> 결과
SELECT
    G.MONEY + SUM(BOUGHT.PURCHASE_PRICE) - SUM(SOLD.SELLING_PRICE) AS TODAY_START,
    G.MONEY AS TODAY_END,
    G.PAWNSHOP_DEBT * 0.05 AS TODAY_INTEREST,
    G.PERSONAL_DEBT * 0.0005 AS TODAY_INTEREST_PERSONAL,
    G.MONEY - G.PAWNSHOP_DEBT * 0.05 - G.PERSONAL_DEBT * 0.0005 AS TODAY_FINAL
FROM GAME_SESSION G, DEAL_RECORD BOUGHT, DEAL_RECORD SOLD
WHERE
    G.GAME_SESSION_KEY = (
        SELECT GAME_SESSION_KEY FROM GAME_SESSION
        WHERE PLAYER_KEY = 1
        ORDER BY GAME_SESSION_KEY DESC
        FETCH FIRST ROW ONLY
    )
    AND BOUGHT.GAME_SESSION_KEY = G.GAME_SESSION_KEY
    AND SOLD.GAME_SESSION_KEY = G.GAME_SESSION_KEY
    AND BOUGHT.BOUGHT_DATE = G.DAY_COUNT
    AND SOLD.SOLD_DATE = G.DAY_COUNT
GROUP BY G.MONEY, G.PAWNSHOP_DEBT, G.PERSONAL_DEBT;  -- G는 정확히 1개 -> 결과 자체에는 영항 X
-- 당일 구매한 것들 목록
SELECT BOUGHT.*
FROM GAME_SESSION G, DEAL_RECORD BOUGHT
WHERE
    G.GAME_SESSION_KEY = (
        SELECT GAME_SESSION_KEY FROM GAME_SESSION
        WHERE PLAYER_KEY = 1
        ORDER BY GAME_SESSION_KEY DESC
        FETCH FIRST ROW ONLY
    )
    AND BOUGHT.GAME_SESSION_KEY = G.GAME_SESSION_KEY
    AND BOUGHT.BOUGHT_DATE = G.DAY_COUNT;
-- 당일 판매한 것들 목록
SELECT SOLD.*
FROM GAME_SESSION G, DEAL_RECORD SOLD
WHERE
    G.GAME_SESSION_KEY = (
        SELECT GAME_SESSION_KEY FROM GAME_SESSION
        WHERE PLAYER_KEY = 1
        ORDER BY GAME_SESSION_KEY DESC
        FETCH FIRST ROW ONLY
    )
    AND SOLD.GAME_SESSION_KEY = G.GAME_SESSION_KEY
    AND SOLD.SOLD_DATE = G.DAY_COUNT;
-- 해당 아이디 있는지 확인 (Type 1)
SELECT HASHED_PW FROM PLAYER WHERE PLAYER_ID = 'user001';
-- 게임 세션(회차) 기록
SELECT G.GAME_END_DAY_COUNT, G.GAME_END_DATE, MGAIN_DEAL.*, MLOSS_DEAL.*
FROM GAME_SESSION G, DEAL_RECORD MGAIN_DEAL, DEAL_RECORD MLOSS_DEAL
WHERE
    G.GAME_SESSION_KEY = (
        SELECT GAME_SESSION_KEY FROM GAME_SESSION
        WHERE PLAYER_KEY = 1
        ORDER BY GAME_SESSION_KEY DESC
        FETCH FIRST ROW ONLY
    )
    AND MGAIN_DEAL.DRC_KEY = (
        SELECT DRC_KEY FROM DEAL_RECORD D
        WHERE D.GAME_SESSION_KEY = G.GAME_SESSION_KEY
        ORDER BY (D.SELLING_PRICE - D.PURCHASE_PRICE) DESC
        FETCH FIRST ROW ONLY
    )
    AND MLOSS_DEAL.DRC_KEY = (
        SELECT DRC_KEY FROM DEAL_RECORD D
        WHERE D.GAME_SESSION_KEY = G.GAME_SESSION_KEY
        ORDER BY (D.SELLING_PRICE - D.PURCHASE_PRICE)
        FETCH FIRST ROW ONLY
    );
-- 게임 (진행 중, 완료 포함)의 모든 거래 기록: Player 이름과 함께 (Type 2)
SELECT P.PLAYER_ID, D.* FROM PLAYER P, GAME_SESSION G, DEAL_RECORD D
WHERE P.PLAYER_KEY = G.PLAYER_KEY AND G.GAME_SESSION_KEY = D.GAME_SESSION_KEY;
-- 게임 (진행 중, 완료 포함)의 일자별 총이익 (판매) 합계: Player 이름과 함께 (Type 3)
SELECT P.PLAYER_ID, SUM(D.PURCHASE_PRICE) FROM (
    ((PLAYER P JOIN GAME_SESSION G ON P.PLAYER_KEY = G.PLAYER_KEY)
        JOIN DEAL_RECORD D ON G.GAME_SESSION_KEY = D.GAME_SESSION_KEY)
) GROUP BY D.PURCHASE_PRICE;
-- 회원가입하고, 1번이라도 플레이한 PLAYER (GAME_SESSION이 있는 Player) (Type 5)
SELECT P.PLAYER_ID FROM PLAYER P WHERE EXISTS (SELECT * FROM GAME_SESSION G WHERE P.PLAYER_KEY = G.PLAYER_KEY);
-- 5회 이상 플레이한 플레이어들의 ID (Type 6)
SELECT P.PLAYER_ID FROM PLAYER P WHERE P.PLAYER_KEY IN (
    SELECT P.PLAYER_KEY FROM PLAYER P, GAME_SESSION S
    WHERE P.PLAYER_KEY = S.PLAYER_KEY
    GROUP BY P.PLAYER_KEY HAVING COUNT(*) > 5
);
-- 플레이어별 각 게임 세션별 아이템 개수 (순이익 높은 순서대로) (Type 9)
SELECT P.PLAYER_ID, S.GAME_SESSION_KEY, COUNT(*)
FROM ((PLAYER P JOIN GAME_SESSION G ON P.PLAYER_KEY = G.PLAYER_KEY)
        JOIN EXISTING_ITEM I ON G.GAME_SESSION_KEY = I.GAME_SESSION_KEY)
GROUP BY S.GAME_SESSION_KEY
ORDER BY COUNT(*);
-- 특정 플레이어가 모든 게임 세션에 걸쳐 발견 못 한 아이템 종류명 (Type 10)
(SELECT IC.ITEM_CATALOG_NAME FROM ITEM_CATALOG IC)
MINUS
(
    SELECT IC.ITEM_CATALOG_NAME FROM GAME_SESSION G, EXISTING_ITEM I, ITEM_CATALOG IC
    WHERE
        G.PLAYER_KEY = 1
        AND G.GAME_SESSION_KEY = I.GAME_SESSION_KEY
        AND I.ITEM_CATALOG_KEY = IC.ITEM_CATALOG_KEY
);

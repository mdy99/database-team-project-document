CREATE TABLE ITEM_CATEGORY(
    CATEGORY_KEY NUMBER(9) -- 대리 키
        CONSTRAINT PK_ITEM_CATEGORY PRIMARY KEY,
    CATEGORY_NAME VARCHAR2(10 CHAR) -- 10글자 내 이름(한글 고려)
);

CREATE TABLE PLAYER(
    PLAYER_KEY NUMBER(9) GENERATED AS IDENTITY -- 대리 키, 1부터 자동 증가
        CONSTRAINT PK_PLAYER PRIMARY KEY,
    PLAYER_ID VARCHAR2(30) UNIQUE NOT NULL, --최대 30글자 영문 아이디.
    HASHED_PW VARCHAR2(81), -- SHA256 해시(HEX, 64자) + 구분자 + Salt(16자) 고려
    SESSION_TOKEN VARCHAR2(64) UNIQUE, -- 로그인 세션 구분용 토큰. 랜덤64B 문자열
    LAST_ACTIVITY DATE DEFAULT SYSDATE NOT NULL -- 마지막 행동 시간. 매 요청마다 업데이트 하기
);

-- TODO: 세션 만료 주기적으로 실행 가능한지 확인

CREATE TABLE GAME_SESSION (
    GAME_SESSION_KEY NUMBER(9) GENERATED AS IDENTITY -- 대리 키, 1부터 자동 증가
        CONSTRAINT PK_GAME_SESSION PRIMARY KEY,
    PLAYER_KEY NUMBER(9),
        CONSTRAINT FK_GAME_SESSION_PLAYER FOREIGN KEY (PLAYER_KEY) REFERENCES PLAYER(PLAYER_KEY),
    DAY_COUNT NUMBER(5) DEFAULT 1, -- 최대 10^5일까지 저장 가능
        CONSTRAINT CK_DAY_COUNT_NOTNEG CHECK(DAY_COUNT>=1),
    MONEY NUMBER(9) DEFAULT 50000, -- 최대 10^9짜리 돈까지 저장 가능
        CONSTRAINT CK_MONEY_NOTNEG CHECK(MONEY>=0),
    PERSONAL_DEBT NUMBER(9) DEFAULT 500000, -- 남은(갚아야 하는) 개인 빚
        CONSTRAINT CK_PERSONAL_DEBT_NOTNEG CHECK(PERSONAL_DEBT>=0),
    PAWNSHOP_DEBT NUMBER(9) DEFAULT 0, -- 남은(갚아야 하는) 전당포 빚
        CONSTRAINT CK_PAWNSHOP_DEBT_NOTNEG CHECK(PAWNSHOP_DEBT>=0),
    UNLOCKED_SHOWCASE_COUNT NUMBER(1) DEFAULT 2, -- 현재 해금한 쇼케이스 숫자 최소2 최대 8
        CONSTRAINT CK_UNLOCKED_SHOWCASE_COUNT_RANGE CHECK (UNLOCKED_SHOWCASE_COUNT BETWEEN 2 AND 8),
    NICKNAME VARCHAR2(10 CHAR), -- 10글자 내 이름(한글 고려)
    SHOP_NAME VARCHAR2(10 CHAR), -- 10글자 내 상점 이름(한글 고려)
    -- 클리어 나온 뒤 기록
    CLEAR_DAY_COUNT NUMBER(9) DEFAULT NULL, -- 클리어했을 당시 게임 일수
    CLEAR_DATE DATE DEFAULT NULL -- 클리어 당시 현실 날짜
);


CREATE TABLE CUSTOMER_CATALOG(
    CUSTOMER_KEY NUMBER(9) -- 대리 키
        CONSTRAINT PK_CUSTOMER PRIMARY KEY,
    CUSTOMER_NAME VARCHAR2(3 CHAR) NOT NULL, -- 한글 3글자 이름
    CATEGORY_KEY NUMBER(9) NOT NULL REFERENCES ITEM_CATEGORY(CATEGORY_KEY), -- 선호 카테고리 아이디
    IMG_ID VARCHAR2(10) NOT NULL, --이미지 아이디 CIM00001~CIM99999
        CONSTRAINT CK_CUSTOMER_IMG_ID_FORMAT CHECK(REGEXP_LIKE(IMG_ID, '^CIM[0-9]{5}$')),
    FRAUD NUMBER(5,4) DEFAULT 0 NOT NULL, -- 사기 잘 칠 것 같은 정도 0.0000 ~ 1.0000
        CONSTRAINT CK_FRAUD_RANGE CHECK(FRAUD BETWEEN 0.0 AND 1.0),
    WELL_COLLECT NUMBER(5,4) DEFAULT 0 NOT NULL, -- 잘 수집할 것 같은 정도 0.0000 ~ 1.0000
        CONSTRAINT CK_WELL_COLLECT_RANGE CHECK(WELL_COLLECT BETWEEN 0.0 AND 1.0),
    CLUMSY NUMBER(5,4) DEFAULT 0 NOT NULL, -- 흠 많이 낼 것 같은 정도 0.0000 ~ 1.0000
        CONSTRAINT CK_CLUMSY_RANGE CHECK(CLUMSY BETWEEN 0.0 AND 1.0)
);

CREATE TABLE ITEM_CATALOG(
    ITEM_CATALOG_KEY NUMBER(9) -- 대리 키
        CONSTRAINT PK_ITEM_CATALOG PRIMARY KEY,
    ITEM_CATALOG_NAME VARCHAR2(20 CHAR) NOT NULL UNIQUE,
    IMG_ID VARCHAR2(10) NOT NULL, --이미지 아이디 ITM00001~ITM99999
        CONSTRAINT CK_ITEM_CATALOG_IMG_ID_FORMAT CHECK(REGEXP_LIKE(IMG_ID, '^ITM[0-9]{5}$')),
    CATEGORY_KEY NUMBER(9) NOT NULL REFERENCES ITEM_CATEGORY(CATEGORY_KEY), -- 아이템의 카테고리 아이디
    BASE_PRICE NUMBER(9) NOT NULL
);

CREATE TABLE EXISTING_ITEM(
    ITEM_KEY NUMBER(9) GENERATED AS IDENTITY -- 대리 키, 1부터 자동 증가
        CONSTRAINT PK_EXISTING_ITEM PRIMARY KEY,
    GAME_SESSION_KEY NUMBER(9) NOT NULL REFERENCES GAME_SESSION(GAME_SESSION_KEY), --FK 플레이어 키. 플레이어에게 할당된 아이템
    ITEM_CATALOG_KEY NUMBER(9) NOT NULL REFERENCES ITEM_CATALOG(ITEM_CATALOG_KEY), -- 카탈로그 키
    GRADE NUMBER(1) NOT NULL, -- 숨겨진 등급. 일반(0), 레어(1),유니크(2),레전더리(3)
        CONSTRAINT CK_EXISTING_ITEM_GRADE_RANGE CHECK (GRADE BETWEEN 0 AND 3),
    FOUND_GRADE NUMBER(1) DEFAULT 0 NOT NULL, -- 숨겨진 등급. 일반(0), 레어(1),유니크(2),레전더리(3)
        CONSTRAINT CK_EXISTING_ITEM_FOUND_GRADE_RANGE CHECK (FOUND_GRADE BETWEEN 0 AND 3),
    FLAW_EA NUMBER(2) NOT NULL, -- 흠 개수. 0~14개까지 존재 가능
        CONSTRAINT CK_EXISTING_ITEM_FLAW_EA_RANGE CHECK (FLAW_EA BETWEEN 0 AND 14),
    FOUND_FLAW_EA NUMBER(2) DEFAULT 0 NOT NULL, -- 플레이어가 찾은 흠 개수. 0~14개까지 존재 가능
        CONSTRAINT CK_EXISTING_ITEM_FOUND_FLAW_EA_RANGE CHECK (FOUND_FLAW_EA BETWEEN 0 AND 14),
    AUTHENTICITY CHAR(1) NOT NULL, -- 진위 여부, BOOL이 없으므로 Y OR N CHAR로 저장
        CONSTRAINT CK_EXISTING_ITEM_AUTHENTICITY_RANGE CHECK (AUTHENTICITY IN ('Y','N')),
    IS_AUTHENTICITY_FOUND CHAR(1) DEFAULT 'N' NOT NULL, -- 플레이어가 진위 여부를 찾아내었는지 여부
        CONSTRAINT CK_EXISTING_ITEM_FOUND_AUTHENTICITY_RANGE CHECK (IS_AUTHENTICITY_FOUND IN ('Y','N')),
    ITEM_STATE NUMBER(1) DEFAULT 0 NOT NULL, -- 아이템 진행 상황
        CONSTRAINT CK_EXISTING_ITEM_STATE_RANGE CHECK (
            ITEM_STATE IN (
                0, -- 생성 됨
                1, -- 전시 중
                2, -- 복원 중
                3, -- 경매 중
                4  -- 판매 됨
            )
        ),
    ISACTIVE CHAR(1) DEFAULT 'Y' NOT NULL -- 활성화 여부, BOOL이 없으므로 Y OR N CHAR로 저장. 게임오버/클리어 시 비활성화함
        CONSTRAINT CK_EXISTING_ITEM_ISACTIVE_RANGE CHECK (ISACTIVE IN('Y','N')),
    CONSTRAINT CK_EXISTING_ITEM_GRADE_EQ_OR_LOWER_THAN_REAL CHECK (FOUND_GRADE <= GRADE),
    CONSTRAINT CK_EXISTING_ITEM_FLAW_FOUND_EQ_OR_LOWER_THAN_REAL CHECK (FOUND_FLAW_EA <= FLAW_EA)
);

CREATE TABLE DEAL_RECORD(
    DRC_KEY NUMBER(9) GENERATED AS IDENTITY -- 대리 키, 1부터 자동 증가
        CONSTRAINT PK_DEAL_RECORD PRIMARY KEY,
    GAME_SESSION_KEY NUMBER(9) NOT NULL REFERENCES GAME_SESSION(GAME_SESSION_KEY), --FK 플레이어 키
    SELLER_KEY NUMBER(9) NOT NULL REFERENCES CUSTOMER_CATALOG(CUSTOMER_KEY), --FK 물건 판매 고객 키
    BUYER_KEY NUMBER(9) REFERENCES CUSTOMER_CATALOG(CUSTOMER_KEY), -- FK 물건 구매 고객 키. 판매 전까지는 NULL
    ITEM_KEY NUMBER(9) NOT NULL UNIQUE REFERENCES EXISTING_ITEM(ITEM_KEY), -- FK 아이템 키
    ASKING_PRICE NUMBER(9) DEFAULT NULL, -- 최초 제시가
	CONSTRAINT CK_ASKING_PRICE_NOTNEG CHECK(ASKING_PRICE>=0),
    PURCHASE_PRICE NUMBER(9) DEFAULT NULL, -- 구매가
	CONSTRAINT CK_PURCHASE_PRICE_NOTNEG CHECK(PURCHASE_PRICE>=0),
    APPRAISED_PRICE NUMBER(9) DEFAULT NULL, -- 감정가
	CONSTRAINT CK_APPRAISED_PRICE_NOTNEG CHECK(APPRAISED_PRICE>=0),
    SELLING_PRICE NUMBER(9) DEFAULT NULL, -- 최종 판매가
	CONSTRAINT CK_SELLING_PRICE_NOTNEG CHECK(SELLING_PRICE>=0),
    ISACTIVE CHAR(1) DEFAULT 'Y' NOT NULL, -- 진위 여부, BOOL이 없으므로 Y OR N CHAR로 저장
        CONSTRAINT CK_DEAL_RECORD_ISACTIVE_RANGE CHECK (ISACTIVE IN ('Y','N')),
    SOLD_DATE NUMBER(5), -- 판매한 게임 내 일수. 판매한 날짜에 채움
    CONSTRAINT CK_BUYER_KEY CHECK(BUYER_KEY IS NULL OR BUYER_KEY != SELLER_KEY)--판매자와 구매자는 달라야 함
);

CREATE TABLE CUSTOMER_HIDDEN_DISCOVERED_IN_GAME_SESSION(
    DISCOVERED_KEY NUMBER(9) GENERATED AS IDENTITY -- 대리 키, 1부터 자동 증가
        CONSTRAINT PK_CUSTOMER_HIDDEN_DISCOVERED_IN_GAME_SESSION PRIMARY KEY,
    GAME_SESSION_KEY NUMBER(9) NOT NULL,
        CONSTRAINT FK_CUSTOMER_HIDDEN_DISCOVERED_IN_GAME_SESSION_GAME_SESSION FOREIGN KEY (GAME_SESSION_KEY) REFERENCES GAME_SESSION(GAME_SESSION_KEY),
    CUSTOMER_KEY NUMBER(9) NOT NULL,
        CONSTRAINT FK_CUSTOMER_HIDDEN_DISCOVERED_IN_GAME_SESSION_CUSTOMER FOREIGN KEY (CUSTOMER_KEY) REFERENCES CUSTOMER_CATALOG(CUSTOMER_KEY),
    HINT_REVEALED_FLAG NUMBER(1) DEFAULT 0 NOT NULL, -- 고객 뒷조사로 열은 고객 힌트 열람 여부. 힌트 3개에 대하여 이진수 "000~111"로 저장
        CONSTRAINT CK_CUSTOMER_HIDDEN_DISCOVERED_IN_GAME_SESSION_HINT_REVEALED_FLAG CHECK (HINT_REVEALED_FLAG BETWEEN 0 AND 7),
    CONSTRAINT UQ_CUSTOMER_HIDDEN_DISCOVERED_IN_GAME_SESSION_CUSTOMER UNIQUE(GAME_SESSION_KEY, CUSTOMER_KEY) --중복 고객 막기
);

CREATE TABLE GAME_SESSION_ITEM_DISPLAY(
    DISPLAY_KEY NUMBER(9) GENERATED AS IDENTITY -- 대리 키, 1부터 자동 증가
        CONSTRAINT PK_GAME_SESSION_ITEM_DISPLAY PRIMARY KEY,    
    GAME_SESSION_KEY NUMBER(9) NOT NULL,
        CONSTRAINT FK_GAME_SESSION_ITEM_DISPLAY_GAME_SESSION FOREIGN KEY (GAME_SESSION_KEY) REFERENCES GAME_SESSION(GAME_SESSION_KEY),
    ITEM_KEY NUMBER(9) NOT NULL,
        CONSTRAINT FK_GAME_SESSION_ITEM_DISPLAY_ITEM FOREIGN KEY (ITEM_KEY) REFERENCES EXISTING_ITEM(ITEM_KEY),
    DISPLAY_POS NUMBER(1) NOT NULL -- 아이템의 쇼케이스 내 위치
        CONSTRAINT CK_DISPLAY_POS_RANGE CHECK (DISPLAY_POS BETWEEN 0 AND 7),
    CONSTRAINT UQ_GAME_SESSION_ITEM_DISPLAY UNIQUE(GAME_SESSION_KEY, DISPLAY_POS), --위치 중복 막기
    CONSTRAINT UQ_GAME_SESSION_ITEM_DISPLAY_ITEM UNIQUE(GAME_SESSION_KEY, ITEM_KEY) --중복 아이템 막기
);

CREATE TABLE NEWS_CATALOG(
    NCT_KEY NUMBER(9) -- 대리 키
        CONSTRAINT PK_NEWS_CATALOG PRIMARY KEY,
    NEWS_NAME VARCHAR2(50 CHAR) NOT NULL UNIQUE,
    AFFECTED_PRICE NUMBER(1) NOT NULL -- 영향 받는 최초 제시가(0), 구매가(1), 감정가(2), 최종 판매가(3)
        CONSTRAINT CK_NEWS_CATALOG_RANGE CHECK (
        AFFECTED_PRICE IN (
            0, -- 최초 제시가
            1, -- 구매가
            2, -- 감정가
            3  -- 최종 판매가
            )
        ),
        CATEGORY_KEY NUMBER(9) NOT NULL REFERENCES ITEM_CATEGORY(CATEGORY_KEY), -- 영향받는 카테고리 아이디
        PLUS_MINUS NUMBER(1) NOT NULL, -- +방향으로 영향 주는지, -방향으로 영향 주는지
        CONSTRAINT CK_PLUS_MINUS_RANGE CHECK (
        PLUS_MINUS IN (
            1, -- PLUS
            -1 -- MINUS
            )
        )
);

CREATE TABLE EXISTING_NEWS(
    GAME_SESSION_KEY NUMBER(9) NOT NULL REFERENCES GAME_SESSION(GAME_SESSION_KEY),
    NCAT_KEY NUMBER(9) NOT NULL REFERENCES NEWS_CATALOG(NCT_KEY),
    AMOUNT NUMBER(3) NOT NULL, -- 0~999(%) 까지 영향 가능.(실제 들어올 데이터는 몇 십 단위)
        CONSTRAINT CK_NEWS_AMOUNT_NOTNEG CHECK(AMOUNT>=0),
    CONSTRAINT PK_EXISTING_NEWS PRIMARY KEY (GAME_SESSION_KEY, NCAT_KEY) 
);

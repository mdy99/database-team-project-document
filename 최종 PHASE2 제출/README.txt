README.txt

						[ SQL 실행 순서 ]
1. CREATE_TABLE_DDL.sql
2. INSERT_RECORD_ALL.sql
						[ 테이블 전체 삭제를 원한다면 ]
1. DELETE_TABLE_ALL.sql


						[ 간단 기획 설명 ]
개인 빚을 갚기 위해 고향으로 내려와 전당포를 이어 운영하기로 하였다
물건의 흠을 찾거나, 진위 여부, 숨겨진 가치 등급을 밝혀내 
구매 가격을 낮추거나 감정 가격을 높여서
싸게 사서 비싸게 파는 게 목적이다.
이 과정에서 대출을 받거나, 경매에 아이템을 내놓거나 기습 이벤트(뉴스)가 발생할 수 있다.

이자를 못 내게 되면, 게임 오버
개인 빚을 모두 갚으면 게임 클리어

게임을 클리어하면, 세계 기록에 기록을 남길 수 있다.


						[ 세부 기획 목차 ]
[거래 전 동작]
	- 뉴스 이벤트 발생
	- 손님 접수
		- 판매
		- 거래
[거래 중 동작]
	- 아이템 힌트 열람
	- 고객 뒷조사 (고객 힌트 열람)
	- 흠 찾기
	- 진위 판정
	- 감정
	- 거래하기
	- 거래 안 하기
[거래 후 동작]
	- 전시장 해금
	- 복원
	- 경매
	- 대출
	- 대출 상환하기
	- 다음 날 넘어가기
[게임 외부]
	- 게임 오버
	- 게임 클리어
	- 로그인/회원가입
	- 세계 기록 확인



						[ 세부 기획 ]
[거래 전 동작]
	- 뉴스 이벤트 발생
		: 플레이어의 DAY_COUNT가 1일차를 제외한 7의 배수일차일 때마다 이벤트가 발생합니다.
			이벤트가 발생하면, 이전 이벤트가 있다면, 이전 이벤트는 삭제합니다.
			뉴스 이벤트를 임의의 카탈로그_ID 랜덤하게 1~3개의 이벤트를 생성시킨 뒤, DB에 넣습니다 (이벤트는 중복이 가능합니다.)
		이벤트 한번에 생성되는 개수
		0: 30 %
		1: 40 %
		2: 20 %
		3: 10 %


			뉴스이벤트는 최초 제시가, 거래가, 감정가, 최종 판매가 중 하나에 영향을 끼치며, 영향의 정도는 임의의 -50~50(%)입니다.
	-손님 접수(매일 3명)
		- 판매
			: 전시 중인 아이템이 있음
				→ 손님의 선호 카테고리와 아이템의 카테고리가 동일함 → 구매를 시도함
					→ 판매하지 않는다면, 거래가 시작됨
					→ 판매한다면, 감정가의 20% 할인 된 금액으로 구매해감. 
		- 거래 시작

[거래 중 동작]

  [ 필드 ]
	- 최초 제시가
		: 고객이 최초로 제시하는 가격 
	- 구매가
		: 최초 제시가와 동일합니다. [거래 중] 흠 찾기, 진위 판정 등을 통해 하락시킬 수 있습니다.
	- 감정가
		: 최초 제시가와 동일합니다. [거래 중] 흠 찾기, 진위 판정, 감정 등을 통해 변화되며, [거래 후]에는 복원을 통해 변화시킬 수 있습니다.
	- 최종 판매가
		: 	[ 거래 중 ] 미표시.
			[ 거래 전 ] 손님에게 판매하는 경우, 현재 감정가의 20%를 할인 한 금액으로 설정됩 후 판매 됩니다.
			[ 거래 후 ] 경매로 판매하는 경우, 현재 감정가의 랜덤하게 1.2~1.5배 증가된 금액으로 설정된 후 판매 됩니다.

  [ 동작 ]
	[서버] DB에 아이템, 거래 생성

	[고객 필드]
		사기정도 0.0~1.0
		잘수집정도 0.0~1.0
		부주의함 0.0~1.0
			흠이 있을 삘(랜덤 변수) 0.0~1.0

	[아이템 필드]
		흠 개수 0~14개
			:  ( 0+ 10 * 부주의함 ) + (0 + 4 * 흠이 있을 삘) 개

		진위 여부 T/F
			: 	가품 확률값: ( 10 + 90 * 사기 정도 ) (%)
				진품 확률값: (100 - 가품 확률)(%)

		등급 0~3 /일반~레전더리
			:	레전더리 확률값: 	15 + (65 * 잘수집정도 )
				   유니크 확률값: 	20 + ( (65 * (1 - 잘수집정도) ) /3 ) (%)
				      레어 확률값: 	30 + ( (65 * (1 - 잘수집정도) ) /3 ) (%)
				      일반 확률값: 	35 + ( (65 * (1 - 잘수집정도) ) /3 ) (%)
			
		최초 제시가
			: 	기준가 = 아이템 카탈로그- 베이스가격
			최초 제시가 = 기준가	×[(1−0.02×흠 개수)
							×(1−0.3×가품 확률)
							×((1+0.3×등급)/3)
							×(1+0.25×사기 정도)
							×(1+0.2×(수집력−0.5))]

	- 아이템 힌트 열람
		아이템 이미지 아래에 아이템 힌트 열람 [ 10 G ] 버튼 6개
			- 흠이 있을 것 같은 삘 0.0~1.0
			- 레전더리 확률값
			- 유니크 확률값
			- 레어 확률값
			- 진품 확률값
			- 최소 몇개 이상 ( (0+10 * 부주의함) *(0.8) )
		힌트의 정렬 순서는 랜덤

	- 고객 뒷조사 (고객 힌트 열람)
		고객 이미지 아래에 아이템 힌트 열람 [ 20 G ] 버튼 3개
			- 사기정도 0.0~1.0
			- 잘수집정도 0.0~1.0
			- 부주의함 0.0~1.0
		힌트의 정렬 순서는 사기정도, 잘수집정도, 부주의함
		그 고객으로부터 한번 열람한 정보는 다음에 방문 했을 때에도 여전히 확인 가능함(PLAYER_CUSTOMER_HIDDEN_DISCOVERED)
		

	- 흠 찾기 (여러 번 시행 가능)
		: 흠을 찾았다면, 구매가와 감정가가 흠의 개수 x 5% 만큼 하락합니다. (최대 70% 하락, 최대 흠 개수 14개)
			- 고급 흠 찾기	[ 100 G ]
				: 만약 흠이 그만큼 있다면, 최대 7개의 흠을 찾아냅니다.
			- 중급 흠 찾기	[  60 G ]
				: 만약 흠이 그만큼 있다면, 최대 4개의 흠을 찾아냅니다.
			- 하급 흠 찾기	[  20 G ]
				: 만약 흠이 그만큼 있다면, 최대 1개의 흠을 찾아냅니다.
	- 진위 판정	[  200 G ]
		: 진품/가품 상태를 확정시킵니다.
			진품이었다면, 가격에 변동이 없습니다.
			가품이었다면, 구매가가 50% 하락합니다. 감정가는 20% 하락합니다. (최종 판매 시, 30% 이득)
			- 만약 미확정 상태에서 복원을 시도하면,
				진품이었다면, 가격에 변동이 없습니다.
				가품이었다면, 감정가 30% 하락합니다.
	- 감정 (여러 번 시행 가능)
		-숨겨진 등급을 확률에 따라 확정시킵니다.
			- 레전더리 감정	[  50 G ]
				: 아이템의 숨겨진 등급에 따라 최대 레전더리 등급까지 확정시킬 수 있습니다.
			- 유니크 감정	[  30 G ]
				: 아이템의 숨겨진 등급에 따라 최대 유니크 등급까지 확정시킬 수 있습니다.
			- 레어 감정		[  20 G ]
				: 아이템의 숨겨진 등급에 따라 최대 레어 등급까지 확정시킬 수 있습니다.
		- 등급이 확정되면, 감정가가 아래 표에 따라 증가합니다.
			레전더리	: 감정가가 최초 제시가의 1.7배로 증가합니다.
			유니크	: 감정가가 최초 제시가의 1.5배로 증가합니다.
			레어		: 감정가가 최초 제시가의 1.2배로 증가합니다.
		- 등급 확정 확률표
			아이템이 레전더리 등급이라면,
				일반		: 10%
				레어		: 20%
				유니크	: 30%
				레전더리	: 40%
			아이템이 유니크 등급이라면,
				일반		: 20%
				레어		: 30%
				유니크	: 50%
			아이템이 레어 등급이라면,
				일반		: 30%
				레어		: 70%
		
	- 거래 하기
		[DB] 아이템 - 상태 : 전시 중으로 변경
		[DB] 최초 제시가, 구매가는 이제 고정.
		
	- 거래 안 하기
		[서버] DB에 아이템, 거래 제거

[거래 후 동작]

  [ 필드 ]
	- 최초 제시가 ▶ 최초 제시가 * (이벤트 수치(적용 중인 뉴스)* ~최대 3개)

	- 구매가 ▶ 최초 제시가 * (1 - 밝혀낸 흠 개수 * 5%) * 감정 등급(1.0~1.7) * (1 - 거래 중 진품 여부(FALSE =1) * 50%)   * (이벤트 수치(적용 중인 뉴스)* ~최대 3개)

	- 감정가 ▶ 최초 제시가 * (1 - 밝혀낸 흠 개수 * 5% + 수리한 흠 개수 * 5%) * 감정 등급(1.0~1.7) 
					* (1 - 거래 중 진품 여부(FALSE =1) * 20%) * (1 - 복원 중 진품 여부(FALSE =1) * 30%)  * (이벤트 수치(적용 중인 뉴스)* ~최대 3개)

	- 최종 판매가 ▶ 감정가 * (1 - 고객 판매 여부(TRUE=1) * 20%) * (경매 판매 여부(TRUE=1) *(1.3~1.7))
						* (1- 진품 여부 미확정 상태(TRUE =1) * 40% ) * (이벤트 수치(적용 중인 뉴스)* ~최대 3개)
		: 	[ 거래 중 ] 미표시.
			[ 거래 전 ] 손님에게 판매하는 경우, 현재 감정가의 20%를 할인 한 금액으로 설정됩 후 판매 됩니다.
			[ 거래 후 ] 경매로 판매하는 경우, 현재 감정가의 랜덤하게 1.2~1.5배 증가된 금액으로 설정된 후 판매 됩니다.
	- [전시장]
		- 아이템 추가 시,
			[DB] 전시 아이템 테이블(PLAYER_ITEM_DISPLAY)에 비어있는 가장 빠른 POSITION 번호에 INSERT
				EX. [전시 위치] 카테고리 번호 : 
						[0] 1
						[1]      << INSERT
						[2] 3
						[3] 2
						[4] 
						[5] 
		- 아이템 판매 시,
			[DB] 전시 아이템 테이블(PLAYER_ITEM_DISPLAY)에 카테고리가 일치하는 아이템 중 임의의 POSITION 아이템 판매 및 DELETE
				EX. [전시 위치] 카테고리 번호 : 
						[0] 1
						[1] 2 <<
						[2] 3
						[3] 2 <<
						[4] 4
						[5] 2 <<
					카테고리 번호가 2인 전시 위치 1,3,5 중 랜덤 위치 3 선택.
					

  [ 동작 ]
	- 전시장 해금
		: 최초 2개까지 전시 가능.
		[ 1000 G ] 4개로 확장
		[ 2000 G ] 8개로 확장
		
	- 복원
		: 전시 중인 아이템을 복원 전문가에게 맡긴다.
			1. 흠 수리
				: 흠 당 10 골드를 소모하여 흠을 수리합니다.
				: 수리한 흠 당 감정가가 5% 증가합니다.
			2. 진위 판정(흠 수리 시 자동 판정 됩니다.)
				: 미확정 상태라면,
					진품이라면, 감정가에 변동이 없습니다.
					가품이라면, 감정가가 30% 하락합니다.
				: 확정 상태라면, 감정가에 변동이 없습니다.
		미 수리하여, 미확정 상태에서 판매 시, 최종 판매가는 40% 하락합니다.
		복원에는 1일이 소모 됩니다. 
		복원 중에는 아이템이 잠금 상태가 되어, 해당 전시장 위치를 사용할 수 없습니다.

	- 경매
		: 경매는 3의 배수 일차마다 열린다.
		경매 출품 중에는 아이템이 잠금 상태가 되어, 해당 전시장 위치를 사용할 수 없다.
		경매에는 1일이 걸린다.
		경매가 완료 되면, 아이템은 전시장에서 사라진다. 정산금을 알려준다.
		경매가 완료 된 후, 1일 후 정산금이 들어온다.

		경매의 경우, 거래 - 구매 고객에 고객키로 0번(경매인)이 들어간다.

	- 대출
		: 매일 [거래 후]일 때, 대출을 받을 수 있다
			- [ 2,000G ] 
			- [ 1,000G ] 
			- [   500G ] 
			- [   300G ]

	- 대출 상환하기
		[거래 후]에는 대출 빚을 상환할 수 있다.		
		- 개인 빚( 기본 500,000 골드 )
			: 원하는 금액만큼 입력 후 상환 버튼을 누른다
		- 대출 빚
			- 각 대출 리스트가 표시 된다.
			- 대출 객체를 선택하면, << 대출 테이블이 쓰이는 곳
			- 대출 빚 상환 버튼 아래에 대출 상환 기록이 리스트로 표시 된다 << 상환 기록 테이블이 쓰이는 곳
			: 원하는 금액만큼 입력 후 상환 버튼을 누른다
	- 다음 날 넘어가기
		- 정산
			+ 잔금 ( + 오늘 판매하여 벌은 금액) ← SELECT (유저 - 돈), SUM(거래 -최종 판매가) WHERE DAY_COUNT == SOLD_DATE
			- 대출 빚 이자 (총 대출 빚의 5%)
			------------------------------
			하루 수익금 표시

		- 7의 배수 일차마다 정산
			+ 잔금 ( + 오늘 판매하여 벌은 금액) ← SELECT (유저 - 돈), SUM(거래 -최종 판매가) WHERE DAY_COUNT == SOLD_DATE
			- 개인 빚 이자 (개인 빚의 0.05%) ← (유저 -개인 빚) * 0.005
			- 대출 빚 이자 (총 대출 빚의 5%) ← SUM(대출 - 남은 대출 금액) * 0.05
			------------------------------
			하루 수익금 표시

		개인 빚은 이자율이 적은 대신 게임을 클리어하는데 필요
		전당포 빚은 이자율이 높고 매일 내야 함.
			>> 무조건 전당포 빚을 먼저 갚도록 강요

		만약, 이자를 내지 못한다면, 게임 오버

[게임 외부]
	- 게임 오버
		: 개인 빚에 대한 이자를 못 내게 되면, 게임이 오버 됩니다.
			DB 속 플레이어-고객 만남, 플레이어-아이템 전시, 대출-상환 기록, 뉴스 레코드가 모두 삭제 됩니다. (모두 참조하는 쪽이라 부담없이 지울 수 있는 쪽)
			DB 속 거래, 아이템은 유지됩니다.
			DB 속 아이템의 활성화 여부가 비활성화가 됩니다.
			DB 속 거래의 활성화 여부가 비활성화가 됩니다.
	- 게임 클리어
		- 대출 빚과 개인 빚을 모두 갚으면, 게임을 클리어하게 됩니다.
			DB 속 세계 기록에 현재 플레이 기록 중 일부를 작성해 삽입합니다.
			DB 속 플레이어-고객 만남, 플레이어-아이템 전시, 대출-상환 기록, 뉴스 레코드가 모두 삭제 됩니다. (모두 참조하는 쪽이라 부담없이 지울 수 있는 쪽)
			DB 속 거래, 아이템은 유지됩니다.
			DB 속 아이템의 활성화 여부가 비활성화가 됩니다.
			DB 속 거래의 활성화 여부가 비활성화가 됩니다.
	- 로그인/회원가입
		- 회원가입
			회원 가입 버튼을 누른다
				아이디와 비밀번호를 입력한다
				아이디 중복 시 다시 입력하게 한다
		- 로그인
			아이디와 비밀번호를 입력한다
	- 세계 기록
		세계 기록 창으로 간다
		세계 기록 리스트가 표시된다
		세계 기록 클릭 시 팝업으로 상세 팝업이 뜬다


					[ DB 테이블 목차 ]
 1. 유저(PLAYER)
 2. 고객(CUSTOMER)
 3. 아이템 카테고리(ITEM_CATEGORY) : 20개 레코드(상세 설명은 아래 엔티티)
 4. 아이템 카탈로그(ITEM_CATALOG)
 5. 아이템(EXISTING_ITEM)
 6. 거래(DEAL_RECORD)
 7. 플레이어-고객 비밀 발견(PLAYER_CUSTOMER_HIDDEN_DISCOVERED) <관계>
 8. 플레이어-아이템 전시(PLAYER_ITEM_DISPLAY) <관계>
 9. 세계 기록(WORLD_RECORD)
10. 대출(LOAN)
11. 뉴스(EXISTING_NEWS)
12. 뉴스 카탈로그(NEWS_CATALOG)
13. 로그인 기록(LOGIN_LOG): <<WEAK_ENTITY>>


					[ DB 엔티티 ]
 1. 유저(PLAYER)
	- 플레이어 키		PK	NUMBER(9)			: 내부 조인용 PK. SEQUENCE로 구현
	- 플레이어 아이디			VARCHAR2(30)		: 유저가 입력하는 아이디
	- 해시된 비밀번호			VARCHAR2(81)		: 유저가 설정한 비밀번호. SHA256 해시(HEX, 64자) + 구분자 + Salt(16자) 고려
	- 생성 날짜 				DATE				: DEFAULT SYSDATE로 생성된 날짜를 저장함
	- 주인 이름(닉네임) 		VARCHAR2(10 CHAR)	: 한글 기준 10글자 저장 가능
	- 가게 이름 				VARCHAR2(10 CHAR)	: 한글 기준 10글자 저장 가능
	- 잔금 				NUMBER(9)			: 0~999,999,999원까지 저장 가능
	- 개인 빚 				NUMBER(9)			: 0~999,999,999원까지 저장 가능
	- 진행 일수				NUMBER(5)			: 1~99,999일차까지 저장 가능

 2. 고객(CUSTOMER)
	- 고객 키 			PK	NUMBER(9)			: 내부 조인용 PK. SEQUENCE로 구현
	- 고객 이름				NUMBER(3 CHAR)	: 한글 기준 3글자 저장 가능
	- 카테고리 키 		FK	NUMBER(9)			: 선호하는 카테고리 키
	- 이미지 ID	 			VARCHAR2(10)		: 고객 이미지. 동일한 이미지를 여러 고객이 공유할 수 있음. CIM00001~CIM99999
	- 사기 가능성 			NUMBER(5,4)		: 사기를 잘 칠 것 같은 정도. 0.0000 ~ 1.0000
	- 수집력 				NUMBER(5,4)		: 수집을 잘 할 것 같은 정도. 0.0000 ~ 1.0000
	- 부주의함 				NUMBER(5,4)		: 흠 많이 낼 것 같은 정도. 0.0000 ~ 1.0000

 3. 아이템 카테고리(ITEM_CATEGORY)
	- 카테고리 키		PK	NUMBER(9)			: 내부 조인용 PK. SEQUENCE로 구현
	- 카테고리 이름 			VARCHAR2(10 CHAR)	: 한글 기준 10글자 저장 가능
>> 고객의 선호 카테고리와 아이템의 카테고리가 일치해야 구매를 하는 시스템
>> 카테고리가 너무 많아지면, 고객이 아이템을 살 확률이 너무 낮아져, 게임이 진행이 안 됨.
>> 그래서 고정적인 20개 레코드만을 유지함.

 4. 아이템 카탈로그(ITEM_CATALOG)
	- 아이템 카탈로그 키	PK	NUMBER(9)			: 내부 조인용 PK. SEQUENCE로 구현
	- 아이템 이름 PK 			VARCHAR2(20 CHAR)	: 한글 기준 20글자 저장 가능
	- 이미지 ID	 			VARCHAR2(10)		: 아이템 이미지. 동일한 이미지를 여러 아이템이 공유할 수 있음. ITM00001~ITM99999
	- 카테고리 키 		FK	NUMBER(9)			: 아이템의 카테고리 키
	- 기준가				NUMBER(9)			: 아이템의 기준 가격

 5. 아이템(EXISTING_ITEM)
	- 아이템 키			PK	NUMBER(9)			: 내부 조인용 PK. SEQUENCE로 구현
	- 플레이어 키		FK	NUMBER(9)			: 해당 아이템이 어느 플레이어에게 생성됐는지 저장을 위한 FK
	- 카탈로그 키 FK			NUMBER(9)			: 아이템의 기본 토대
	- 등급				NUMBER(1)			: 숨겨진 등급. 일반(0), 레어(1),유니크(2),레전더리(3)
	- 찾은 등급				NUMBER(1)			: 플레이어가 '감정'을 통해 현재까지 최종으로 찾은 등급
	- 흠 개수				NUMBER(2)			: 흠 개수 0~14개까지 존재 가능
	- 찾은 흠 개수			NUMBER(2)			: 플레이어가 '흠 찾기'를 통해 현재까지 최종으로 찾은 흠 개수
	- 진위 여부				CHAR(1)			: 진위 여부, BOOL이 없으므로 Y OR N CHAR로 저장. 기본 'Y'
	- 찾은 진위 여부			CHAR(1)			: 플레이어가 '진위 판정'을 통해 확정한 진위 여부( Y: 진품인 것을 찾음. N: 가품인 것을 찾음. NULL: 미확정 상태)
	- 상태				NUMBER(1)			: 아이템 진행 상황. 생성됨(0), 전시 중(1), 복원 중(2), 경매 중(3), 판매 됨(4)
	- 활성화 여부			CHAR(1)			: 활성화 여부, BOOL이 없으므로 Y OR N CHAR로 저장. 기본 'Y'. 게임오버/클리어 시 비활성화함

 6. 거래(DEAL_RECORD)
	- 거래 키			PK	NUMBER(9)			: 내부 조인용 PK. SEQUENCE로 구현
	- 플레이어 키		FK	NUMBER(9)			: 해당 거래에 참여한 플레이어 키
	- 판매 고객 키 		FK	NUMBER(9)			: 해당 거래에 참여한 판매 고객 키
	- 구매 고객 키		FK	NUMBER(9)			: 해당 거래에 참여한 구매 고객 키. NULL 가능, 제약: 판매 고객과 구매 고객은 달라야 함
	- 아이템 키			FK	NUMBER(9)			: 해당 거래에 참여된 아이템 키.
	- 최초 제시가			NUMBER(9)			: 고객이 최초로 제시한 가격
	- 구매가				NUMBER(9)			: 해당 아이템을 매입한 가격
	- 감정가				NUMBER(9)			: 판매하기 전 최종 감정된 가격
	- 최종 판매가			NUMBER(9)			: 고객/경매로 최종 판매된 가격
	- 활성화 여부			CHAR(1)			: 활성화 여부, BOOL이 없으므로 Y OR N CHAR로 저장. 기본 'Y'. 게임오버/클리어 시 비활성화함
	- 판매 날짜				NUMBER(5)			: 판매한 게임 내 일수. 판매한 날짜에 채움. NULL 가능

 7. 플레이어-고객 비밀 발견(PLAYER_CUSTOMER_HIDDEN_DISCOVERED) <관계>
	- 발견 키			PK	NUMBER(9)			: 내부 조인용 PK. SEQUENCE로 구현
	- 플레이어 키 		FK	NUMBER(9)			: 해당 플레이어 키 
	- 고객 키 			FK	NUMBER(9)			: 해당 고객 키
	- 열람여부			 	NUMBER(3)			: 고객 뒷조사로 열은 고객 힌트 열람 여부다. 힌트 3개에 대하여 이진수 "000~111"로 저장해 0~7까지 확인 가능
	- 플레이어-고객		UQ	*CONSTRAINT		: 플레이어, 고객 복합키 중복 제거. 플레이어는 한 고객에 대해 만남 횟수 한번만 저장 후 업데이트하여 사용

 8. 플레이어-아이템 전시(PLAYER_ITEM_DISPLAY) <관계>
	- 전시 키			PK	NUMBER(9)			: 내부 조인용 PK. SEQUENCE로 구현
	- 플레이어 키 		FK	NUMBER(9)			: 해당 플레이어 키 
	- 고객 키 			FK	NUMBER(9)			: 해당 고객 키
	- 전시 위치				NUMBER(1)			: 0~7번 (총 8개의 전시 위치) 중 어디에 위치했었는지 저장한다.
	- 플레이어-전시 위치	UQ	*CONSTRAINT		: 플레이어, 전시 위치 복합키 중복 제거. 한 위치에 두 아이템 막기 위함
	- 플레이어-아이템		UQ	*CONSTRAINT		: 플레이어, 아이템 복합키 중복 제거. 아이템 중복 막기 위함

 9. 세계 기록(WORLD_RECORD)
	- 세계 기록 키		PK	NUMBER(9)			: 내부 조인용 PK. SEQUENCE로 구현
	- 플레이어 키 		FK	NUMBER(9)			: 해당 플레이어 키 
	- 클리어 일수			NUMBER(9) 		: 클리어했을 당시 게임 일수
	- 클리어 날짜			DATE 			: 클리어 당시 현실 날짜. DEFAULT SYSDATE
	- 가장 큰 이득 거래 키	FK	NUMBER(9) 		: 가장 이득 본 거래의 키

10. 대출(LOAN)
	- 대출 키			PK	NUMBER(9)			: 내부 조인용 PK. SEQUENCE로 구현
	- 플레이어 키 		FK	NUMBER(9)			: 대출한 해당 플레이어 키 
	- 남은 빌린 금액			NUMBER(5)			: 대출금 중 현재 남은 금액 (EX. INSERT 2000 UPDATE 1800,UPDATE 1200,UPDATE 900, ...)

11. 뉴스(EXISTING_NEWS): <<WEAK_ENTITY>>
	- 뉴스 키			PK	NUMBER(9)			: 내부 조인용 PK. SEQUENCE로 구현
	- 플레이어 키 		FK	NUMBER(9)			: 영향 받는 해당 플레이어 키 
	- 뉴스 카탈로그 키	FK	NUMBER(9)			: 뉴스의 기본 토대
	- 영향 받는 정도			NUMBER(3)			: -999(%) ~ +999(%) 까지 영향을 줌  

12. 뉴스 카탈로그(NEWS_CATALOG)
	- 카탈로그 키		PK	NUMBER(9)			: 내부 조인용 PK. SEQUENCE로 구현
	- 뉴스 이름				VARCHAR2(20 CHAR)	: 뉴스 이름. 한글 기준 20글자 담기 가능
	- 영향 받는 가격			NUMBER(1)			: 영향 받는 최초 제시가(0), 구매가(1), 감정가(2), 최종 판매가(3)
	- 영향 받는 카테고리	FK	NUMBER(9)			: 영향 받는 카테고리 키

13. 로그인 기록(LOGIN_LOG): <<WEAK_ENTITY>>
	- 플레이어 키 		FK	NUMBER(9)			: 로그인한 해당 플레이어 키. WEAK ENTITY이기 때문에 ON DELETE CASCADE 처리
	- 로그 키				NUMBER(9)			: 내부 조인용 PK. SEQUENCE로 구현
	- 로그인 날짜시간			DATE				: 로그인 시각. NOT NULL. DEFAULT SYSDATE
	- 로그아웃 날짜시간		DATE				: 로그아웃 시각. NULLABLE (NULL이라면, 현재 로그인 중이라는 말)
	- 세션 토큰				VARCHAR2(64)		: 로그인 세션 구분용 토큰. 랜덤 64B 문자열 생성. (일종의 클라 신분증)
	- 마지막 행동 시간		DATE				: 마지막 행동 시간. 매요청마다 UPDATE SYSDATE. 30분 지나면, 세션 만료 시키기
	- 세션 유효				CHAR(1)			: 현재 세션이 유효한지 CHECK ('Y'/'N')
	- 플레이어키-로그키	PK	*CONSTRAINT		: 플레이어 키와 로그 키의 PK 복합키
	- 플레이어-세션 유효	UQ	*CONSTRAINT		: 플레이어, 세션 유효 여부 중복 제거. 다중 로그인 방지. 한 플레이어는 한번만 로그인이 가능하다.


					[ 테이블이 아닌 관계 ]
[사전 설정]
(0,n)-(1,1)	: 플레이어는 하나도 참여 안 할수도 여러 개 참여할 수도 있다, 상대는 무조건 플레이어가 참여해야 한다
(1,1)-(0,n)	: 위 상황에서 방향만 반대

DEAL_RECORD		-<INCLUDES>-			PLAYER			: (1,1)-(0,n). 거래에 무조건 플레이어가 참여해야 함. 플레이어는 거래할 수도 안 할 수도
DEAL_RECORD 		-<INCLUDES>-			EXISTING_ITEM		: (1,1)-(0,1). 거래에는 무조건 아이템이 참여해야 함. 아이템은 최대 거래 하나에만 참여할 수 있음
CUSTOMER			-<SELLS>-				DEAL_RECORD 		: (0,n)-(1,1). 최초로 물건을 판매한 고객을 연결함
CUSTOMER 		-<BUYS>-				DEAL_RECORD 		: (0,n)-(1,1). 최종으로 물건을 구매한 고객을 연결함. 아직 판매하지 않은 경우, NULL이 가능함
EXISTING_ITEM 		-<REALIZES>-			ITEM_CATALOG		: (1,1)-(0,n). 아이템은 아이템 카탈로그를 무조건 참조함
EXISTING_NEWS 		-<REALIZES>-			NEWS_CATALOG		: (1,1)-(0,n). 뉴스는 뉴스 카탈로그를 무조건 참조함
PLAYER 			-<IS_AFFECTED_BY>-		EXISTING_NEWS		: (0,n)-(1,1). 현재 진행 중인 뉴스 이벤트에 영향 받고 있는 플레이어 키를 참조

ITEM_CATALOG		-<BELONGS_TO>-		ITEM_CATEGORY		: (1,1)-(0,n). 아이템 카탈로그는 카테고리를 무조건 참조함
CUSTOMER			-<LOVES_TO_BUY>-		ITEM_CATEGORY		: (1,1)-(0,n). 고객은 카테고리를 무조건 참조함
ITEM_CATEGORY		-<IS_AFFECTED_BY>-		NEWS_CATALOG		: (0,n)-(1,1). 뉴스 카탈로그는 아이템 카테고리를 무조건 참조함


PLAYER 			-<BORROWS>-			LOAN				: (0,n)-(1,1). 대출에 대출한 플레이어를 키로 참조
LOAN				-<<IS_LOGGED_BY>>-		REPAY_LOG	(WEAK)	: (0,n)-(1,1). 해당 대출에 해당하는 상환 기록을 저장 WEAK 관계

PLAYER 			-<IS_INCLUDED_IN>-		WORLD_RECORD		: (0,n)-(1,1). 세계 기록에 기록된 플레이어를 키로 참조
DEAL_RECORD 		-<IS_INCLUDED_IN>-		WORLD_RECORD		: (0,n)-(1,1). 가장 큰 이득 거래를 키로 참조







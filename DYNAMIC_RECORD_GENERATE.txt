--------------------------------------------------------------------------------
-- 통합 데이터 삽입 프로시저 (Oracle 19c 호환, 완전 검증 버전)
-- STATIC_ENTITY_INSERT_ALL.sql 실행 후 호출
--------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE POPULATE_ALL_DYNAMIC_TABLES AS
BEGIN
  --------------------------------------------------------------------------------
  -- 1. PLAYER
  --------------------------------------------------------------------------------
  FOR i IN 1..200 LOOP
    INSERT INTO PLAYER (PLAYER_ID, HASHED_PW, SESSION_TOKEN)
    VALUES (
      'user' || LPAD(i, 3, '0'),
      LOWER(RAWTOHEX(SYS_GUID())) || ';' || DBMS_RANDOM.STRING('A', 16),
      DBMS_RANDOM.STRING('A', 64)
    );
  END LOOP;
  COMMIT;

  --------------------------------------------------------------------------------
  -- 2. GAME_SESSION
  --------------------------------------------------------------------------------
  FOR i IN 1..600 LOOP
    DECLARE
      v_player NUMBER := TRUNC(DBMS_RANDOM.VALUE(1, 201)); -- FK: PLAYER_KEY (1~200)
      v_day NUMBER := TRUNC(DBMS_RANDOM.VALUE(10, 80));
      v_clear_ratio NUMBER := DBMS_RANDOM.VALUE(0, 1);
      v_game_end NUMBER;
      v_personal_debt NUMBER := TRUNC(DBMS_RANDOM.VALUE(100000, 500001));
      v_pawnshop_debt NUMBER := TRUNC(DBMS_RANDOM.VALUE(10000, 20000));
      v_money NUMBER := TRUNC(DBMS_RANDOM.VALUE(80000, 180000));
      v_showcase NUMBER := CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.3 THEN 2
                                WHEN DBMS_RANDOM.VALUE(0, 1) < 0.6 THEN 4
                                ELSE 8 END;
    BEGIN
      IF v_clear_ratio < 0.3 THEN
        v_game_end := v_day;
        v_personal_debt := 0;
        v_pawnshop_debt := 0;
      ELSIF v_clear_ratio < 0.6 THEN
        v_game_end := -v_day;
      ELSE
        v_game_end := NULL;
      END IF;

      INSERT INTO GAME_SESSION (
        PLAYER_KEY, DAY_COUNT, MONEY, PERSONAL_DEBT, PAWNSHOP_DEBT,
        UNLOCKED_SHOWCASE_COUNT, NICKNAME, SHOP_NAME, GAME_END_DAY_COUNT, GAME_END_DATE
      )
      VALUES (
        v_player, v_day, v_money, v_personal_debt, v_pawnshop_debt,
        v_showcase, '닉네임' || v_player, '상점' || v_player, v_game_end,
        CASE WHEN v_game_end > 0 THEN SYSDATE ELSE NULL END
      );
    END;
  END LOOP;
  COMMIT;

  --------------------------------------------------------------------------------
  -- 3. EXISTING_ITEM & 4. DEAL_RECORD (1:1 대응)
  --------------------------------------------------------------------------------
  FOR i IN 1..1500 LOOP
    DECLARE
      v_session NUMBER := TRUNC(DBMS_RANDOM.VALUE(1, 601));
      v_grade NUMBER := TRUNC(DBMS_RANDOM.VALUE(0, 4));
      v_flaw NUMBER := TRUNC(DBMS_RANDOM.VALUE(0, 15));
      v_auth CHAR(1) := CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.8 THEN 'Y' ELSE 'N' END;
      v_state NUMBER := TRUNC(DBMS_RANDOM.VALUE(0, 5));
      v_seller NUMBER := TRUNC(DBMS_RANDOM.VALUE(1, 101)); -- CUSTOMER_CATALOG FK
      v_buyer NUMBER := NULL;
      v_price NUMBER := TRUNC(DBMS_RANDOM.VALUE(5000, 25000));
      v_max_day NUMBER;
      v_bought_day NUMBER;
      v_sold_day NUMBER;
    BEGIN
      IF DBMS_RANDOM.VALUE(0, 1) < 0.5 THEN
        LOOP
          v_buyer := TRUNC(DBMS_RANDOM.VALUE(1, 101));
          EXIT WHEN v_buyer != v_seller;
        END LOOP;
      END IF;

      -- 해당 세션의 DAY_COUNT 가져오기 (판매/구매일 계산용)
      SELECT DAY_COUNT INTO v_max_day
      FROM GAME_SESSION
      WHERE GAME_SESSION_KEY = v_session;

      -- 구매일: 1 ~ v_max_day 사이 랜덤
      v_bought_day := TRUNC(DBMS_RANDOM.VALUE(1, v_max_day + 1));

      -- 판매일: 구매일 이후 ~ v_max_day 사이 (구매자가 있을 때만)
      IF v_buyer IS NOT NULL THEN
        v_sold_day := TRUNC(DBMS_RANDOM.VALUE(v_bought_day, v_max_day + 1));
      ELSE
        v_sold_day := NULL;
      END IF;

      -- EXISTING_ITEM 삽입
      INSERT INTO EXISTING_ITEM (
        GAME_SESSION_KEY,
        ITEM_CATALOG_KEY,
        GRADE,
        FOUND_GRADE,
        FLAW_EA,
        FOUND_FLAW_EA,
        SUSPICIOUS_FLAW_AURA,
        AUTHENTICITY,
        IS_AUTHENTICITY_FOUND,
        ITEM_STATE
      )
      VALUES (
        v_session,
        TRUNC(DBMS_RANDOM.VALUE(1, 101)),
        v_grade,
        TRUNC(DBMS_RANDOM.VALUE(0, v_grade + 1)),  -- 0 ~ GRADE
        v_flaw,
        TRUNC(DBMS_RANDOM.VALUE(0, v_flaw + 1)),   -- 0 ~ FLAW_EA
        ROUND(DBMS_RANDOM.VALUE(0, 1), 4),         -- 0.0000 ~ 1.0000
        v_auth,
        CASE WHEN DBMS_RANDOM.VALUE(0,1) < 0.5 THEN 'Y' ELSE 'N' END,
        v_state
      );

      -- DEAL_RECORD 삽입
      INSERT INTO DEAL_RECORD (
        GAME_SESSION_KEY, SELLER_KEY, BUYER_KEY, ITEM_KEY,
        ASKING_PRICE, PURCHASE_PRICE, APPRAISED_PRICE, SELLING_PRICE,
        BOUGHT_DATE, SOLD_DATE
      )
      VALUES (
        v_session, v_seller, v_buyer, i,
        v_price,
        v_price * DBMS_RANDOM.VALUE(0.6, 1.0),
        v_price * DBMS_RANDOM.VALUE(0.9, 1.7),
        CASE WHEN v_buyer IS NOT NULL THEN v_price * DBMS_RANDOM.VALUE(1.0, 1.8)
             ELSE NULL END,
        v_bought_day,
        v_sold_day
      );
    END;
  END LOOP;
  COMMIT;

  --------------------------------------------------------------------------------
  -- 5. CUSTOMER_HIDDEN_DISCOVERED_IN_GAME_SESSION
  --------------------------------------------------------------------------------
  FOR v_sess IN 1..600 LOOP
    DECLARE
      TYPE cust_set_t IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
      v_cust_set cust_set_t;
      v_cust NUMBER;
    BEGIN
      FOR j IN 1..5 LOOP
        LOOP
          v_cust := TRUNC(DBMS_RANDOM.VALUE(1, 101));
          EXIT WHEN v_cust_set.EXISTS(v_cust) = FALSE;
        END LOOP;

        v_cust_set(v_cust) := 1;

        INSERT INTO CUSTOMER_HIDDEN_DISCOVERED_IN_GAME_SESSION (
          GAME_SESSION_KEY, CUSTOMER_KEY, HINT_REVEALED_FLAG
        )
        VALUES (v_sess, v_cust, TRUNC(DBMS_RANDOM.VALUE(0, 8)));
      END LOOP;
    END;
  END LOOP;
  COMMIT;

  --------------------------------------------------------------------------------
  -- 6. GAME_SESSION_ITEM_DISPLAY
  --------------------------------------------------------------------------------
FOR v_sess IN 1..600 LOOP
  DECLARE
    TYPE pos_set_t IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
    v_pos_set pos_set_t;
    v_pos NUMBER;
    v_item EXISTING_ITEM.ITEM_KEY%TYPE;
    CURSOR c_items IS
      SELECT ITEM_KEY
      FROM EXISTING_ITEM
      WHERE GAME_SESSION_KEY = v_sess
      AND ROWNUM <= 8;  -- 한 세션당 최대 8개까지만 전시 후보
  BEGIN
    FOR rec IN c_items LOOP
      -- 무작위로 0~7 위치 중 빈 자리 선택
      LOOP
        v_pos := TRUNC(DBMS_RANDOM.VALUE(0, 8));
        EXIT WHEN v_pos_set.EXISTS(v_pos) = FALSE;
      END LOOP;

      v_pos_set(v_pos) := 1;

      BEGIN
        INSERT INTO GAME_SESSION_ITEM_DISPLAY (
          GAME_SESSION_KEY, ITEM_KEY, DISPLAY_POS
        )
        VALUES (v_sess, rec.ITEM_KEY, v_pos);
      EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
          NULL; -- 중복 포지션/아이템은 스킵
      END;
    END LOOP;
  END;
END LOOP;
COMMIT;
  --------------------------------------------------------------------------------
  -- 7. EXISTING_NEWS
  --------------------------------------------------------------------------------
 DECLARE
    v_min_news NUMBER;
    v_max_news NUMBER;
  BEGIN
    -- NEWS_CATALOG의 실제 범위 확인
    SELECT MIN(NCT_KEY), MAX(NCT_KEY)
    INTO v_min_news, v_max_news
    FROM NEWS_CATALOG;

    FOR v_player IN 1..200 LOOP
      DECLARE
        v_sess_count NUMBER;
        v_sess GAME_SESSION.GAME_SESSION_KEY%TYPE;
        TYPE sess_tab IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
        v_sess_list sess_tab;
        v_idx NUMBER := 0;
      BEGIN
        -- 해당 플레이어의 세션 목록 가져오기
        SELECT GAME_SESSION_KEY
        BULK COLLECT INTO v_sess_list
        FROM GAME_SESSION
        WHERE PLAYER_KEY = v_player;

        v_sess_count := v_sess_list.COUNT;

        -- 세션이 존재하는 경우만 뉴스 생성
        IF v_sess_count > 0 THEN
          -- 플레이어당 0~3개 생성
          FOR j IN 1..TRUNC(DBMS_RANDOM.VALUE(0, 4)) LOOP
            v_idx := TRUNC(DBMS_RANDOM.VALUE(1, v_sess_count + 1));
            v_sess := v_sess_list(v_idx);

            BEGIN
              INSERT INTO EXISTING_NEWS (
                GAME_SESSION_KEY, NCAT_KEY, AMOUNT
              )
              VALUES (
                v_sess,
                TRUNC(DBMS_RANDOM.VALUE(v_min_news, v_max_news + 1)),
                TRUNC(DBMS_RANDOM.VALUE(10, 80))  -- 몇십 단위 영향값
              );
            EXCEPTION
              WHEN DUP_VAL_ON_INDEX THEN
                NULL; -- 중복 시 스킵
            END;
          END LOOP;
        END IF;
      END;
    END LOOP;

    COMMIT;
  END;
  --------------------------------------------------------------------------------
  -- ✅ 프로시저 본체 닫기
  --------------------------------------------------------------------------------
  DBMS_OUTPUT.PUT_LINE('✅ POPULATE_ALL_DYNAMIC_TABLES completed successfully.');
END;
/
--------------------------------------------------------------------------------
-- 실행 명령어:
-- EXEC POPULATE_ALL_DYNAMIC_TABLES;
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- 통합 데이터 삽입 프로시저 (Oracle 19c 호환, 성능 최적화/무결성 보강 버전)
-- STATIC_ENTITY_INSERT_ALL.sql 실행 후 호출
--------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE POPULATE_ALL_DYNAMIC_TABLES AS
  ------------------------------------------------------------------------------
  -- 공용 타입/버퍼 (배치 캐싱으로 반복 SELECT 제거)
  ------------------------------------------------------------------------------
  TYPE num_tab IS TABLE OF NUMBER INDEX BY PLS_INTEGER;

  v_player_keys      num_tab;  -- PLAYER_KEY 리스트
  v_player_count     NUMBER;

  v_sess_keys        num_tab;  -- GAME_SESSION_KEY 리스트
  v_day_list         num_tab;  -- GAME_SESSION.DAY_COUNT (v_sess_keys와 인덱스 동일)
  v_showcase_list    num_tab;  -- GAME_SESSION.UNLOCKED_SHOWCASE_COUNT (동일 인덱스)
  v_sess_count_total NUMBER;

  v_min_news NUMBER;
  v_max_news NUMBER;
BEGIN
  --------------------------------------------------------------------------------
  -- 1) PLAYER
  --------------------------------------------------------------------------------
  FOR i IN 1..200 LOOP
    INSERT INTO PLAYER (PLAYER_ID, HASHED_PW, SESSION_TOKEN)
    VALUES (
      'user' || LPAD(i, 3, '0'),
      LOWER(RAWTOHEX(SYS_GUID())) || ';' || DBMS_RANDOM.STRING('A', 16),
      DBMS_RANDOM.STRING('A', 64)
    );
  END LOOP;
  COMMIT;

  -- PLAYER 키들 캐싱
  SELECT PLAYER_KEY BULK COLLECT INTO v_player_keys FROM PLAYER;
  v_player_count := v_player_keys.COUNT;

  --------------------------------------------------------------------------------
  -- 2) GAME_SESSION
  --------------------------------------------------------------------------------
  FOR i IN 1..600 LOOP
    DECLARE
      v_player NUMBER;
      v_day NUMBER := TRUNC(DBMS_RANDOM.VALUE(10, 80));
      v_clear_ratio NUMBER := DBMS_RANDOM.VALUE(0, 1);
      v_game_end NUMBER;
      v_personal_debt NUMBER := TRUNC(DBMS_RANDOM.VALUE(100000, 500001)); -- 100k~500k
      v_pawnshop_debt NUMBER := TRUNC(DBMS_RANDOM.VALUE(10000, 20000));
      v_money NUMBER := TRUNC(DBMS_RANDOM.VALUE(80000, 180000));
      v_showcase NUMBER := CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.3 THEN 2
                                WHEN DBMS_RANDOM.VALUE(0, 1) < 0.6 THEN 4
                                ELSE 8 END;
    BEGIN
      -- 존재하는 PLAYER_KEY에서 랜덤 선택
      v_player := v_player_keys(TRUNC(DBMS_RANDOM.VALUE(1, v_player_count + 1)));

      IF v_clear_ratio < 0.3 THEN
        v_game_end := v_day;
        v_personal_debt := 0;
        v_pawnshop_debt := 0;
      ELSIF v_clear_ratio < 0.6 THEN
        v_game_end := -v_day;
      ELSE
        v_game_end := NULL;
      END IF;

      INSERT INTO GAME_SESSION (
        PLAYER_KEY, DAY_COUNT, MONEY, PERSONAL_DEBT, PAWNSHOP_DEBT,
        UNLOCKED_SHOWCASE_COUNT, NICKNAME, SHOP_NAME, GAME_END_DAY_COUNT, GAME_END_DATE
      )
      VALUES (
        v_player, v_day, v_money, v_personal_debt, v_pawnshop_debt,
        v_showcase, '닉네임' || v_player, '상점' || v_player, v_game_end,
        CASE WHEN v_game_end > 0 THEN SYSDATE ELSE NULL END
      );
    END;
  END LOOP;
  COMMIT;

  -- GAME_SESSION 캐싱 (키/일수/쇼케이스수)
  DECLARE
    TYPE nt IS TABLE OF NUMBER;
    l_keys     nt;
    l_days     nt;
    l_showcase nt;
  BEGIN
    SELECT GAME_SESSION_KEY, DAY_COUNT, UNLOCKED_SHOWCASE_COUNT
    BULK COLLECT INTO l_keys, l_days, l_showcase
    FROM GAME_SESSION;

    v_sess_count_total := l_keys.COUNT;
    FOR i IN 1..v_sess_count_total LOOP
      v_sess_keys(i)     := l_keys(i);
      v_day_list(i)      := l_days(i);
      v_showcase_list(i) := l_showcase(i);
    END LOOP;
  END;

  --------------------------------------------------------------------------------
  -- 3) EXISTING_ITEM & 4) DEAL_RECORD (1:1)
  --    - 세션키는 캐시에서 랜덤 선별 → FK 안전
  --    - BOUGHT_DATE/SOLD_DATE는 세션 DAY_COUNT 이내
  --    - FOUND_* / AURA / IS_AUTHENTICITY_FOUND 랜덤
  --------------------------------------------------------------------------------
  FOR i IN 1..1500 LOOP
    DECLARE
      idx           NUMBER := TRUNC(DBMS_RANDOM.VALUE(1, v_sess_count_total + 1));
      v_session     NUMBER := v_sess_keys(idx);
      v_max_day     NUMBER := v_day_list(idx);
      v_grade       NUMBER := TRUNC(DBMS_RANDOM.VALUE(0, 4));
      v_flaw        NUMBER := TRUNC(DBMS_RANDOM.VALUE(0, 15));
      v_auth        CHAR(1) := CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.8 THEN 'Y' ELSE 'N' END;
      v_state       NUMBER := TRUNC(DBMS_RANDOM.VALUE(0, 5));
      v_seller      NUMBER := TRUNC(DBMS_RANDOM.VALUE(1, 101)); -- 1..100
      v_buyer       NUMBER := NULL;
      v_price       NUMBER := TRUNC(DBMS_RANDOM.VALUE(5000, 25000));
      v_bought_day  NUMBER;
      v_sold_day    NUMBER;
    BEGIN
      IF DBMS_RANDOM.VALUE(0, 1) < 0.5 THEN
        LOOP
          v_buyer := TRUNC(DBMS_RANDOM.VALUE(1, 101));
          EXIT WHEN v_buyer != v_seller;
        END LOOP;
      END IF;

      -- 날짜 계산 (세션 일수 이내)
      v_bought_day := TRUNC(DBMS_RANDOM.VALUE(1, v_max_day + 1));
      IF v_buyer IS NOT NULL THEN
        v_sold_day := TRUNC(DBMS_RANDOM.VALUE(v_bought_day, v_max_day + 1));
      ELSE
        v_sold_day := NULL;
      END IF;

      INSERT INTO EXISTING_ITEM (
        GAME_SESSION_KEY,
        ITEM_CATALOG_KEY,
        GRADE,
        FOUND_GRADE,
        FLAW_EA,
        FOUND_FLAW_EA,
        SUSPICIOUS_FLAW_AURA,
        AUTHENTICITY,
        IS_AUTHENTICITY_FOUND,
        ITEM_STATE
      )
      VALUES (
        v_session,
        TRUNC(DBMS_RANDOM.VALUE(1, 101)),              -- ITEM_CATALOG 1..100
        v_grade,
        TRUNC(DBMS_RANDOM.VALUE(0, v_grade + 1)),      -- 0..GRADE
        v_flaw,
        TRUNC(DBMS_RANDOM.VALUE(0, v_flaw + 1)),       -- 0..FLAW_EA
        ROUND(DBMS_RANDOM.VALUE(0, 1), 4),             -- 0.0000..1.0000
        v_auth,
        CASE WHEN DBMS_RANDOM.VALUE(0,1) < 0.5 THEN 'Y' ELSE 'N' END,
        v_state
      );

      INSERT INTO DEAL_RECORD (
        GAME_SESSION_KEY, SELLER_KEY, BUYER_KEY, ITEM_KEY,
        ASKING_PRICE, PURCHASE_PRICE, APPRAISED_PRICE, SELLING_PRICE,
        BOUGHT_DATE, SOLD_DATE
      )
      VALUES (
        v_session, v_seller, v_buyer, i,
        v_price,
        v_price * DBMS_RANDOM.VALUE(0.6, 1.0),
        v_price * DBMS_RANDOM.VALUE(0.9, 1.7),
        CASE WHEN v_buyer IS NOT NULL THEN v_price * DBMS_RANDOM.VALUE(1.0, 1.8)
             ELSE NULL END,
        v_bought_day,
        v_sold_day
      );
    END;
  END LOOP;
  COMMIT;

  --------------------------------------------------------------------------------
  -- 5) CUSTOMER_HIDDEN_DISCOVERED_IN_GAME_SESSION (세션별 5명, 중복 고객 방지)
  --------------------------------------------------------------------------------
  FOR s IN 1..v_sess_count_total LOOP
    DECLARE
      TYPE cust_set_t IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
      v_cust_set cust_set_t;
      v_cust NUMBER;
    BEGIN
      FOR j IN 1..5 LOOP
        LOOP
          v_cust := TRUNC(DBMS_RANDOM.VALUE(1, 101)); -- 1..100
          EXIT WHEN NOT v_cust_set.EXISTS(v_cust);
        END LOOP;
        v_cust_set(v_cust) := 1;

        INSERT INTO CUSTOMER_HIDDEN_DISCOVERED_IN_GAME_SESSION (
          GAME_SESSION_KEY, CUSTOMER_KEY, HINT_REVEALED_FLAG
        )
        VALUES (v_sess_keys(s), v_cust, TRUNC(DBMS_RANDOM.VALUE(0, 8)));
      END LOOP;
    END;
  END LOOP;
  COMMIT;

  --------------------------------------------------------------------------------
  -- 6) GAME_SESSION_ITEM_DISPLAY
  --    - 같은 세션 내 DISPLAY_POS 유일
  --    - DISPLAY_POS < UNLOCKED_SHOWCASE_COUNT 보장
  --    - 아이템은 해당 세션의 것만 전시
  --------------------------------------------------------------------------------
  FOR s IN 1..v_sess_count_total LOOP
    DECLARE
      TYPE pos_set_t IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
      v_pos_set pos_set_t;
      v_pos NUMBER;
      v_max_pos NUMBER := v_showcase_list(s);
      v_sess    NUMBER := v_sess_keys(s);
      CURSOR c_items(p_limit NUMBER) IS
        SELECT ITEM_KEY
        FROM EXISTING_ITEM
        WHERE GAME_SESSION_KEY = v_sess
        AND ROWNUM <= p_limit; -- 전시대 수를 넘지 않도록
    BEGIN
      -- 전시대가 0이면 스킵
      IF v_max_pos IS NULL OR v_max_pos < 1 THEN
        NULL;
      ELSE
        FOR rec IN c_items(LEAST(v_max_pos, 8)) LOOP  -- 최대 8개까지만 후보, 전시는 전시대 수 이하
          -- 0 ~ (v_max_pos-1) 중 빈 자리 선택
          LOOP
            v_pos := TRUNC(DBMS_RANDOM.VALUE(0, v_max_pos));
            EXIT WHEN NOT v_pos_set.EXISTS(v_pos);
          END LOOP;
          v_pos_set(v_pos) := 1;

          BEGIN
            INSERT INTO GAME_SESSION_ITEM_DISPLAY (
              GAME_SESSION_KEY, ITEM_KEY, DISPLAY_POS
            )
            VALUES (v_sess, rec.ITEM_KEY, v_pos);
          EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN NULL;
            WHEN OTHERS THEN NULL;
          END;
        END LOOP;
      END IF;
    END;
  END LOOP;
  COMMIT;

  --------------------------------------------------------------------------------
  -- 7) EXISTING_NEWS (플레이어당 0~3개, 실제 존재하는 세션에서 선택)
  --------------------------------------------------------------------------------
  SELECT MIN(NCT_KEY), MAX(NCT_KEY)
  INTO v_min_news, v_max_news
  FROM NEWS_CATALOG;

  FOR v_player IN 1..v_player_count LOOP
    DECLARE
      TYPE sess_tab IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
      v_sess_list sess_tab;
      v_sess_count NUMBER;
      v_idx NUMBER;
      v_sess NUMBER;
    BEGIN
      SELECT GAME_SESSION_KEY
      BULK COLLECT INTO v_sess_list
      FROM GAME_SESSION
      WHERE PLAYER_KEY = v_player_keys(v_player);

      v_sess_count := v_sess_list.COUNT;

      IF v_sess_count > 0 THEN
        FOR j IN 1..TRUNC(DBMS_RANDOM.VALUE(0, 4)) LOOP
          v_idx  := TRUNC(DBMS_RANDOM.VALUE(1, v_sess_count + 1));
          v_sess := v_sess_list(v_idx);

          BEGIN
            INSERT INTO EXISTING_NEWS (GAME_SESSION_KEY, NCAT_KEY, AMOUNT)
            VALUES (
              v_sess,
              TRUNC(DBMS_RANDOM.VALUE(v_min_news, v_max_news + 1)),
              TRUNC(DBMS_RANDOM.VALUE(10, 80))
            );
          EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN NULL; -- (GAME_SESSION_KEY, NCAT_KEY) PK 충돌 시 스킵
          END;
        END LOOP;
      END IF;
    END;
  END LOOP;
  COMMIT;

  DBMS_OUTPUT.PUT_LINE('✅ POPULATE_ALL_DYNAMIC_TABLES completed successfully.');
END;
/
